// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=50.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=43.750000,HLS_SYN_LAT=77906,HLS_SYN_TPT=none,HLS_SYN_MEM=130,HLS_SYN_DSP=67,HLS_SYN_FF=5098,HLS_SYN_LUT=8104,HLS_VERSION=2018_3}" *)

module conv (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 57'd1;
parameter    ap_ST_fsm_state2 = 57'd2;
parameter    ap_ST_fsm_state3 = 57'd4;
parameter    ap_ST_fsm_state4 = 57'd8;
parameter    ap_ST_fsm_state5 = 57'd16;
parameter    ap_ST_fsm_state6 = 57'd32;
parameter    ap_ST_fsm_state7 = 57'd64;
parameter    ap_ST_fsm_state8 = 57'd128;
parameter    ap_ST_fsm_state9 = 57'd256;
parameter    ap_ST_fsm_state10 = 57'd512;
parameter    ap_ST_fsm_state11 = 57'd1024;
parameter    ap_ST_fsm_state12 = 57'd2048;
parameter    ap_ST_fsm_state13 = 57'd4096;
parameter    ap_ST_fsm_state14 = 57'd8192;
parameter    ap_ST_fsm_state15 = 57'd16384;
parameter    ap_ST_fsm_state16 = 57'd32768;
parameter    ap_ST_fsm_state17 = 57'd65536;
parameter    ap_ST_fsm_state18 = 57'd131072;
parameter    ap_ST_fsm_state19 = 57'd262144;
parameter    ap_ST_fsm_state20 = 57'd524288;
parameter    ap_ST_fsm_state21 = 57'd1048576;
parameter    ap_ST_fsm_state22 = 57'd2097152;
parameter    ap_ST_fsm_state23 = 57'd4194304;
parameter    ap_ST_fsm_state24 = 57'd8388608;
parameter    ap_ST_fsm_state25 = 57'd16777216;
parameter    ap_ST_fsm_state26 = 57'd33554432;
parameter    ap_ST_fsm_state27 = 57'd67108864;
parameter    ap_ST_fsm_state28 = 57'd134217728;
parameter    ap_ST_fsm_state29 = 57'd268435456;
parameter    ap_ST_fsm_state30 = 57'd536870912;
parameter    ap_ST_fsm_state31 = 57'd1073741824;
parameter    ap_ST_fsm_state32 = 57'd2147483648;
parameter    ap_ST_fsm_state33 = 57'd4294967296;
parameter    ap_ST_fsm_state34 = 57'd8589934592;
parameter    ap_ST_fsm_state35 = 57'd17179869184;
parameter    ap_ST_fsm_state36 = 57'd34359738368;
parameter    ap_ST_fsm_state37 = 57'd68719476736;
parameter    ap_ST_fsm_state38 = 57'd137438953472;
parameter    ap_ST_fsm_state39 = 57'd274877906944;
parameter    ap_ST_fsm_state40 = 57'd549755813888;
parameter    ap_ST_fsm_state41 = 57'd1099511627776;
parameter    ap_ST_fsm_state42 = 57'd2199023255552;
parameter    ap_ST_fsm_state43 = 57'd4398046511104;
parameter    ap_ST_fsm_state44 = 57'd8796093022208;
parameter    ap_ST_fsm_state45 = 57'd17592186044416;
parameter    ap_ST_fsm_state46 = 57'd35184372088832;
parameter    ap_ST_fsm_state47 = 57'd70368744177664;
parameter    ap_ST_fsm_state48 = 57'd140737488355328;
parameter    ap_ST_fsm_state49 = 57'd281474976710656;
parameter    ap_ST_fsm_state50 = 57'd562949953421312;
parameter    ap_ST_fsm_state51 = 57'd1125899906842624;
parameter    ap_ST_fsm_state52 = 57'd2251799813685248;
parameter    ap_ST_fsm_state53 = 57'd4503599627370496;
parameter    ap_ST_fsm_state54 = 57'd9007199254740992;
parameter    ap_ST_fsm_state55 = 57'd18014398509481984;
parameter    ap_ST_fsm_state56 = 57'd36028797018963968;
parameter    ap_ST_fsm_state57 = 57'd72057594037927936;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [56:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] chin;
wire   [31:0] chout;
wire   [31:0] kx;
wire   [31:0] ky;
wire   [31:0] win;
wire   [31:0] hin;
wire   [31:0] stride;
wire   [31:0] padding;
wire   [31:0] feature_in;
wire   [31:0] weight;
wire   [31:0] feature_out;
wire   [31:0] bias;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state43;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state50;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state51;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state52;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state57;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [0:0] gmem_ARID;
reg   [31:0] gmem_ARLEN;
reg   [2:0] gmem_ARSIZE;
reg   [1:0] gmem_ARBURST;
reg   [1:0] gmem_ARLOCK;
reg   [3:0] gmem_ARCACHE;
reg   [2:0] gmem_ARPROT;
reg   [3:0] gmem_ARQOS;
reg   [3:0] gmem_ARREGION;
reg   [0:0] gmem_ARUSER;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [31:0] padding_read_reg_529;
reg   [31:0] stride_read_reg_534;
reg   [31:0] hin_read_reg_541;
reg   [31:0] win_read_reg_546;
reg   [31:0] ky_read_reg_551;
reg   [31:0] kx_read_reg_559;
reg   [31:0] chout_read_reg_567;
reg   [31:0] chin_read_reg_572;
reg   [29:0] tmp_reg_580;
reg   [29:0] tmp_39_reg_585;
reg   [29:0] weight3_reg_590;
reg   [29:0] feature_in1_reg_595;
wire   [31:0] tmp_1_cast_fu_398_p1;
reg   [31:0] tmp_1_cast_reg_610;
wire    ap_CS_fsm_state36;
wire   [32:0] tmp_2_cast_fu_401_p1;
reg   [32:0] tmp_2_cast_reg_615;
wire  signed [31:0] wout_fu_404_p2;
reg  signed [31:0] wout_reg_620;
wire  signed [31:0] hout_fu_410_p2;
reg  signed [31:0] hout_reg_626;
wire  signed [31:0] tmp1_fu_416_p2;
reg  signed [31:0] tmp1_reg_632;
wire   [31:0] next_mul_fu_420_p2;
reg   [31:0] next_mul_reg_637;
wire    ap_CS_fsm_state37;
wire   [30:0] cout_1_fu_434_p2;
reg   [30:0] cout_1_reg_645;
wire   [31:0] tmp_38_fu_440_p2;
reg   [31:0] tmp_38_reg_650;
wire   [0:0] tmp_36_fu_429_p2;
reg   [31:0] gmem_addr_reg_655;
wire   [31:0] tmp_40_fu_460_p2;
reg   [31:0] tmp_40_reg_661;
wire   [30:0] h_1_fu_474_p2;
reg   [30:0] h_1_reg_669;
wire    ap_CS_fsm_state38;
wire   [31:0] tmp_44_fu_485_p2;
reg   [31:0] tmp_44_reg_674;
wire   [0:0] tmp_41_fu_469_p2;
wire   [30:0] w_1_fu_499_p2;
reg   [30:0] w_1_reg_682;
wire    ap_CS_fsm_state39;
reg   [31:0] gmem_addr_1_reg_687;
wire   [0:0] tmp_45_fu_494_p2;
wire   [31:0] grp_multiply_fu_272_ap_return;
reg   [31:0] conv_sum_reg_693;
wire    ap_CS_fsm_state44;
wire    grp_multiply_fu_272_ap_ready;
wire    grp_multiply_fu_272_ap_done;
reg   [31:0] gmem_addr_read_reg_698;
wire   [31:0] tmp_47_fu_312_p2;
reg   [31:0] tmp_47_reg_703;
reg    ap_sig_ioackin_gmem_AWREADY;
reg   [14:0] feature_buffer_address0;
reg    feature_buffer_ce0;
reg    feature_buffer_we0;
wire   [31:0] feature_buffer_q0;
reg   [14:0] weight_buffer_address0;
reg    weight_buffer_ce0;
reg    weight_buffer_we0;
wire   [31:0] weight_buffer_q0;
wire    grp_multiply_fu_272_ap_start;
wire    grp_multiply_fu_272_ap_idle;
wire   [14:0] grp_multiply_fu_272_feature_buffer_address0;
wire    grp_multiply_fu_272_feature_buffer_ce0;
wire   [14:0] grp_multiply_fu_272_weight_buffer_address0;
wire    grp_multiply_fu_272_weight_buffer_ce0;
wire    grp_load_feature_fu_281_ap_start;
wire    grp_load_feature_fu_281_ap_done;
wire    grp_load_feature_fu_281_ap_idle;
wire    grp_load_feature_fu_281_ap_ready;
wire    grp_load_feature_fu_281_m_axi_feature_in_AWVALID;
wire   [31:0] grp_load_feature_fu_281_m_axi_feature_in_AWADDR;
wire   [0:0] grp_load_feature_fu_281_m_axi_feature_in_AWID;
wire   [31:0] grp_load_feature_fu_281_m_axi_feature_in_AWLEN;
wire   [2:0] grp_load_feature_fu_281_m_axi_feature_in_AWSIZE;
wire   [1:0] grp_load_feature_fu_281_m_axi_feature_in_AWBURST;
wire   [1:0] grp_load_feature_fu_281_m_axi_feature_in_AWLOCK;
wire   [3:0] grp_load_feature_fu_281_m_axi_feature_in_AWCACHE;
wire   [2:0] grp_load_feature_fu_281_m_axi_feature_in_AWPROT;
wire   [3:0] grp_load_feature_fu_281_m_axi_feature_in_AWQOS;
wire   [3:0] grp_load_feature_fu_281_m_axi_feature_in_AWREGION;
wire   [0:0] grp_load_feature_fu_281_m_axi_feature_in_AWUSER;
wire    grp_load_feature_fu_281_m_axi_feature_in_WVALID;
wire   [31:0] grp_load_feature_fu_281_m_axi_feature_in_WDATA;
wire   [3:0] grp_load_feature_fu_281_m_axi_feature_in_WSTRB;
wire    grp_load_feature_fu_281_m_axi_feature_in_WLAST;
wire   [0:0] grp_load_feature_fu_281_m_axi_feature_in_WID;
wire   [0:0] grp_load_feature_fu_281_m_axi_feature_in_WUSER;
wire    grp_load_feature_fu_281_m_axi_feature_in_ARVALID;
wire   [31:0] grp_load_feature_fu_281_m_axi_feature_in_ARADDR;
wire   [0:0] grp_load_feature_fu_281_m_axi_feature_in_ARID;
wire   [31:0] grp_load_feature_fu_281_m_axi_feature_in_ARLEN;
wire   [2:0] grp_load_feature_fu_281_m_axi_feature_in_ARSIZE;
wire   [1:0] grp_load_feature_fu_281_m_axi_feature_in_ARBURST;
wire   [1:0] grp_load_feature_fu_281_m_axi_feature_in_ARLOCK;
wire   [3:0] grp_load_feature_fu_281_m_axi_feature_in_ARCACHE;
wire   [2:0] grp_load_feature_fu_281_m_axi_feature_in_ARPROT;
wire   [3:0] grp_load_feature_fu_281_m_axi_feature_in_ARQOS;
wire   [3:0] grp_load_feature_fu_281_m_axi_feature_in_ARREGION;
wire   [0:0] grp_load_feature_fu_281_m_axi_feature_in_ARUSER;
wire    grp_load_feature_fu_281_m_axi_feature_in_RREADY;
wire    grp_load_feature_fu_281_m_axi_feature_in_BREADY;
wire   [14:0] grp_load_feature_fu_281_feature_buffer_address0;
wire    grp_load_feature_fu_281_feature_buffer_ce0;
wire    grp_load_feature_fu_281_feature_buffer_we0;
wire   [31:0] grp_load_feature_fu_281_feature_buffer_d0;
wire    grp_load_weight_fu_300_ap_start;
wire    grp_load_weight_fu_300_ap_done;
wire    grp_load_weight_fu_300_ap_idle;
wire    grp_load_weight_fu_300_ap_ready;
wire    grp_load_weight_fu_300_m_axi_weight_AWVALID;
wire   [31:0] grp_load_weight_fu_300_m_axi_weight_AWADDR;
wire   [0:0] grp_load_weight_fu_300_m_axi_weight_AWID;
wire   [31:0] grp_load_weight_fu_300_m_axi_weight_AWLEN;
wire   [2:0] grp_load_weight_fu_300_m_axi_weight_AWSIZE;
wire   [1:0] grp_load_weight_fu_300_m_axi_weight_AWBURST;
wire   [1:0] grp_load_weight_fu_300_m_axi_weight_AWLOCK;
wire   [3:0] grp_load_weight_fu_300_m_axi_weight_AWCACHE;
wire   [2:0] grp_load_weight_fu_300_m_axi_weight_AWPROT;
wire   [3:0] grp_load_weight_fu_300_m_axi_weight_AWQOS;
wire   [3:0] grp_load_weight_fu_300_m_axi_weight_AWREGION;
wire   [0:0] grp_load_weight_fu_300_m_axi_weight_AWUSER;
wire    grp_load_weight_fu_300_m_axi_weight_WVALID;
wire   [31:0] grp_load_weight_fu_300_m_axi_weight_WDATA;
wire   [3:0] grp_load_weight_fu_300_m_axi_weight_WSTRB;
wire    grp_load_weight_fu_300_m_axi_weight_WLAST;
wire   [0:0] grp_load_weight_fu_300_m_axi_weight_WID;
wire   [0:0] grp_load_weight_fu_300_m_axi_weight_WUSER;
wire    grp_load_weight_fu_300_m_axi_weight_ARVALID;
wire   [31:0] grp_load_weight_fu_300_m_axi_weight_ARADDR;
wire   [0:0] grp_load_weight_fu_300_m_axi_weight_ARID;
wire   [31:0] grp_load_weight_fu_300_m_axi_weight_ARLEN;
wire   [2:0] grp_load_weight_fu_300_m_axi_weight_ARSIZE;
wire   [1:0] grp_load_weight_fu_300_m_axi_weight_ARBURST;
wire   [1:0] grp_load_weight_fu_300_m_axi_weight_ARLOCK;
wire   [3:0] grp_load_weight_fu_300_m_axi_weight_ARCACHE;
wire   [2:0] grp_load_weight_fu_300_m_axi_weight_ARPROT;
wire   [3:0] grp_load_weight_fu_300_m_axi_weight_ARQOS;
wire   [3:0] grp_load_weight_fu_300_m_axi_weight_ARREGION;
wire   [0:0] grp_load_weight_fu_300_m_axi_weight_ARUSER;
wire    grp_load_weight_fu_300_m_axi_weight_RREADY;
wire    grp_load_weight_fu_300_m_axi_weight_BREADY;
wire   [14:0] grp_load_weight_fu_300_weight_buffer_address0;
wire    grp_load_weight_fu_300_weight_buffer_ce0;
wire    grp_load_weight_fu_300_weight_buffer_we0;
wire   [31:0] grp_load_weight_fu_300_weight_buffer_d0;
reg   [30:0] cout_reg_226;
reg  signed [31:0] phi_mul_reg_237;
reg   [30:0] h_reg_248;
reg   [30:0] w_reg_260;
reg    grp_multiply_fu_272_ap_start_reg;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    grp_load_feature_fu_281_ap_start_reg;
wire    ap_CS_fsm_state40;
reg    grp_load_weight_fu_300_ap_start_reg;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire   [63:0] bias8_sum_cast_fu_450_p1;
wire  signed [63:0] feature_out6_sum_cas_fu_519_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
reg    ap_sig_ioackin_gmem_WREADY;
wire  signed [31:0] tmp_s_fu_362_p1;
wire   [31:0] tmp_49_fu_356_p2;
wire   [31:0] tmp_s_fu_362_p2;
wire   [31:0] grp_fu_374_p0;
wire   [31:0] tmp_33_fu_380_p2;
wire   [31:0] grp_fu_392_p0;
wire   [31:0] grp_fu_374_p2;
wire   [31:0] grp_fu_392_p2;
wire   [31:0] cout_cast_fu_425_p1;
wire   [31:0] bias8_sum_fu_445_p2;
wire   [30:0] tmp_40_fu_460_p0;
wire   [31:0] h_cast_fu_465_p1;
wire  signed [31:0] tmp_43_fu_480_p2;
wire   [31:0] w_cast_fu_490_p1;
wire   [31:0] tmp_48_fu_505_p2;
wire  signed [32:0] tmp_49_cast_fu_510_p1;
wire   [32:0] feature_out6_sum_fu_514_p2;
reg    grp_fu_374_ap_start;
wire    grp_fu_374_ap_done;
reg    grp_fu_392_ap_start;
wire    grp_fu_392_ap_done;
reg   [56:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 57'd1;
#0 grp_multiply_fu_272_ap_start_reg = 1'b0;
#0 grp_load_feature_fu_281_ap_start_reg = 1'b0;
#0 grp_load_weight_fu_300_ap_start_reg = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

conv_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
conv_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .chin(chin),
    .chout(chout),
    .kx(kx),
    .ky(ky),
    .win(win),
    .hin(hin),
    .stride(stride),
    .padding(padding),
    .feature_in(feature_in),
    .weight(weight),
    .feature_out(feature_out),
    .bias(bias)
);

conv_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
conv_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(gmem_ARID),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(gmem_ARSIZE),
    .I_ARLOCK(gmem_ARLOCK),
    .I_ARCACHE(gmem_ARCACHE),
    .I_ARQOS(gmem_ARQOS),
    .I_ARPROT(gmem_ARPROT),
    .I_ARUSER(gmem_ARUSER),
    .I_ARBURST(gmem_ARBURST),
    .I_ARREGION(gmem_ARREGION),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_1_reg_687),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(tmp_47_reg_703),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

conv_feature_buffer #(
    .DataWidth( 32 ),
    .AddressRange( 25600 ),
    .AddressWidth( 15 ))
feature_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(feature_buffer_address0),
    .ce0(feature_buffer_ce0),
    .we0(feature_buffer_we0),
    .d0(grp_load_feature_fu_281_feature_buffer_d0),
    .q0(feature_buffer_q0)
);

conv_feature_buffer #(
    .DataWidth( 32 ),
    .AddressRange( 25600 ),
    .AddressWidth( 15 ))
weight_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weight_buffer_address0),
    .ce0(weight_buffer_ce0),
    .we0(weight_buffer_we0),
    .d0(grp_load_weight_fu_300_weight_buffer_d0),
    .q0(weight_buffer_q0)
);

multiply grp_multiply_fu_272(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_multiply_fu_272_ap_start),
    .ap_done(grp_multiply_fu_272_ap_done),
    .ap_idle(grp_multiply_fu_272_ap_idle),
    .ap_ready(grp_multiply_fu_272_ap_ready),
    .feature_buffer_address0(grp_multiply_fu_272_feature_buffer_address0),
    .feature_buffer_ce0(grp_multiply_fu_272_feature_buffer_ce0),
    .feature_buffer_q0(feature_buffer_q0),
    .weight_buffer_address0(grp_multiply_fu_272_weight_buffer_address0),
    .weight_buffer_ce0(grp_multiply_fu_272_weight_buffer_ce0),
    .weight_buffer_q0(weight_buffer_q0),
    .chin(chin_read_reg_572),
    .kx(kx_read_reg_559),
    .ky(ky_read_reg_551),
    .ap_return(grp_multiply_fu_272_ap_return)
);

load_feature grp_load_feature_fu_281(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_load_feature_fu_281_ap_start),
    .ap_done(grp_load_feature_fu_281_ap_done),
    .ap_idle(grp_load_feature_fu_281_ap_idle),
    .ap_ready(grp_load_feature_fu_281_ap_ready),
    .m_axi_feature_in_AWVALID(grp_load_feature_fu_281_m_axi_feature_in_AWVALID),
    .m_axi_feature_in_AWREADY(1'b0),
    .m_axi_feature_in_AWADDR(grp_load_feature_fu_281_m_axi_feature_in_AWADDR),
    .m_axi_feature_in_AWID(grp_load_feature_fu_281_m_axi_feature_in_AWID),
    .m_axi_feature_in_AWLEN(grp_load_feature_fu_281_m_axi_feature_in_AWLEN),
    .m_axi_feature_in_AWSIZE(grp_load_feature_fu_281_m_axi_feature_in_AWSIZE),
    .m_axi_feature_in_AWBURST(grp_load_feature_fu_281_m_axi_feature_in_AWBURST),
    .m_axi_feature_in_AWLOCK(grp_load_feature_fu_281_m_axi_feature_in_AWLOCK),
    .m_axi_feature_in_AWCACHE(grp_load_feature_fu_281_m_axi_feature_in_AWCACHE),
    .m_axi_feature_in_AWPROT(grp_load_feature_fu_281_m_axi_feature_in_AWPROT),
    .m_axi_feature_in_AWQOS(grp_load_feature_fu_281_m_axi_feature_in_AWQOS),
    .m_axi_feature_in_AWREGION(grp_load_feature_fu_281_m_axi_feature_in_AWREGION),
    .m_axi_feature_in_AWUSER(grp_load_feature_fu_281_m_axi_feature_in_AWUSER),
    .m_axi_feature_in_WVALID(grp_load_feature_fu_281_m_axi_feature_in_WVALID),
    .m_axi_feature_in_WREADY(1'b0),
    .m_axi_feature_in_WDATA(grp_load_feature_fu_281_m_axi_feature_in_WDATA),
    .m_axi_feature_in_WSTRB(grp_load_feature_fu_281_m_axi_feature_in_WSTRB),
    .m_axi_feature_in_WLAST(grp_load_feature_fu_281_m_axi_feature_in_WLAST),
    .m_axi_feature_in_WID(grp_load_feature_fu_281_m_axi_feature_in_WID),
    .m_axi_feature_in_WUSER(grp_load_feature_fu_281_m_axi_feature_in_WUSER),
    .m_axi_feature_in_ARVALID(grp_load_feature_fu_281_m_axi_feature_in_ARVALID),
    .m_axi_feature_in_ARREADY(gmem_ARREADY),
    .m_axi_feature_in_ARADDR(grp_load_feature_fu_281_m_axi_feature_in_ARADDR),
    .m_axi_feature_in_ARID(grp_load_feature_fu_281_m_axi_feature_in_ARID),
    .m_axi_feature_in_ARLEN(grp_load_feature_fu_281_m_axi_feature_in_ARLEN),
    .m_axi_feature_in_ARSIZE(grp_load_feature_fu_281_m_axi_feature_in_ARSIZE),
    .m_axi_feature_in_ARBURST(grp_load_feature_fu_281_m_axi_feature_in_ARBURST),
    .m_axi_feature_in_ARLOCK(grp_load_feature_fu_281_m_axi_feature_in_ARLOCK),
    .m_axi_feature_in_ARCACHE(grp_load_feature_fu_281_m_axi_feature_in_ARCACHE),
    .m_axi_feature_in_ARPROT(grp_load_feature_fu_281_m_axi_feature_in_ARPROT),
    .m_axi_feature_in_ARQOS(grp_load_feature_fu_281_m_axi_feature_in_ARQOS),
    .m_axi_feature_in_ARREGION(grp_load_feature_fu_281_m_axi_feature_in_ARREGION),
    .m_axi_feature_in_ARUSER(grp_load_feature_fu_281_m_axi_feature_in_ARUSER),
    .m_axi_feature_in_RVALID(gmem_RVALID),
    .m_axi_feature_in_RREADY(grp_load_feature_fu_281_m_axi_feature_in_RREADY),
    .m_axi_feature_in_RDATA(gmem_RDATA),
    .m_axi_feature_in_RLAST(gmem_RLAST),
    .m_axi_feature_in_RID(gmem_RID),
    .m_axi_feature_in_RUSER(gmem_RUSER),
    .m_axi_feature_in_RRESP(gmem_RRESP),
    .m_axi_feature_in_BVALID(1'b0),
    .m_axi_feature_in_BREADY(grp_load_feature_fu_281_m_axi_feature_in_BREADY),
    .m_axi_feature_in_BRESP(2'd0),
    .m_axi_feature_in_BID(1'd0),
    .m_axi_feature_in_BUSER(1'd0),
    .feature_in_offset(feature_in1_reg_595),
    .feature_buffer_address0(grp_load_feature_fu_281_feature_buffer_address0),
    .feature_buffer_ce0(grp_load_feature_fu_281_feature_buffer_ce0),
    .feature_buffer_we0(grp_load_feature_fu_281_feature_buffer_we0),
    .feature_buffer_d0(grp_load_feature_fu_281_feature_buffer_d0),
    .chin(chin_read_reg_572),
    .kx(kx_read_reg_559),
    .ky(ky_read_reg_551),
    .win(win_read_reg_546),
    .hin(hin_read_reg_541),
    .stride(stride_read_reg_534),
    .padding(padding_read_reg_529),
    .x(w_reg_260),
    .y(h_reg_248)
);

load_weight grp_load_weight_fu_300(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_load_weight_fu_300_ap_start),
    .ap_done(grp_load_weight_fu_300_ap_done),
    .ap_idle(grp_load_weight_fu_300_ap_idle),
    .ap_ready(grp_load_weight_fu_300_ap_ready),
    .m_axi_weight_AWVALID(grp_load_weight_fu_300_m_axi_weight_AWVALID),
    .m_axi_weight_AWREADY(1'b0),
    .m_axi_weight_AWADDR(grp_load_weight_fu_300_m_axi_weight_AWADDR),
    .m_axi_weight_AWID(grp_load_weight_fu_300_m_axi_weight_AWID),
    .m_axi_weight_AWLEN(grp_load_weight_fu_300_m_axi_weight_AWLEN),
    .m_axi_weight_AWSIZE(grp_load_weight_fu_300_m_axi_weight_AWSIZE),
    .m_axi_weight_AWBURST(grp_load_weight_fu_300_m_axi_weight_AWBURST),
    .m_axi_weight_AWLOCK(grp_load_weight_fu_300_m_axi_weight_AWLOCK),
    .m_axi_weight_AWCACHE(grp_load_weight_fu_300_m_axi_weight_AWCACHE),
    .m_axi_weight_AWPROT(grp_load_weight_fu_300_m_axi_weight_AWPROT),
    .m_axi_weight_AWQOS(grp_load_weight_fu_300_m_axi_weight_AWQOS),
    .m_axi_weight_AWREGION(grp_load_weight_fu_300_m_axi_weight_AWREGION),
    .m_axi_weight_AWUSER(grp_load_weight_fu_300_m_axi_weight_AWUSER),
    .m_axi_weight_WVALID(grp_load_weight_fu_300_m_axi_weight_WVALID),
    .m_axi_weight_WREADY(1'b0),
    .m_axi_weight_WDATA(grp_load_weight_fu_300_m_axi_weight_WDATA),
    .m_axi_weight_WSTRB(grp_load_weight_fu_300_m_axi_weight_WSTRB),
    .m_axi_weight_WLAST(grp_load_weight_fu_300_m_axi_weight_WLAST),
    .m_axi_weight_WID(grp_load_weight_fu_300_m_axi_weight_WID),
    .m_axi_weight_WUSER(grp_load_weight_fu_300_m_axi_weight_WUSER),
    .m_axi_weight_ARVALID(grp_load_weight_fu_300_m_axi_weight_ARVALID),
    .m_axi_weight_ARREADY(gmem_ARREADY),
    .m_axi_weight_ARADDR(grp_load_weight_fu_300_m_axi_weight_ARADDR),
    .m_axi_weight_ARID(grp_load_weight_fu_300_m_axi_weight_ARID),
    .m_axi_weight_ARLEN(grp_load_weight_fu_300_m_axi_weight_ARLEN),
    .m_axi_weight_ARSIZE(grp_load_weight_fu_300_m_axi_weight_ARSIZE),
    .m_axi_weight_ARBURST(grp_load_weight_fu_300_m_axi_weight_ARBURST),
    .m_axi_weight_ARLOCK(grp_load_weight_fu_300_m_axi_weight_ARLOCK),
    .m_axi_weight_ARCACHE(grp_load_weight_fu_300_m_axi_weight_ARCACHE),
    .m_axi_weight_ARPROT(grp_load_weight_fu_300_m_axi_weight_ARPROT),
    .m_axi_weight_ARQOS(grp_load_weight_fu_300_m_axi_weight_ARQOS),
    .m_axi_weight_ARREGION(grp_load_weight_fu_300_m_axi_weight_ARREGION),
    .m_axi_weight_ARUSER(grp_load_weight_fu_300_m_axi_weight_ARUSER),
    .m_axi_weight_RVALID(gmem_RVALID),
    .m_axi_weight_RREADY(grp_load_weight_fu_300_m_axi_weight_RREADY),
    .m_axi_weight_RDATA(gmem_RDATA),
    .m_axi_weight_RLAST(gmem_RLAST),
    .m_axi_weight_RID(gmem_RID),
    .m_axi_weight_RUSER(gmem_RUSER),
    .m_axi_weight_RRESP(gmem_RRESP),
    .m_axi_weight_BVALID(1'b0),
    .m_axi_weight_BREADY(grp_load_weight_fu_300_m_axi_weight_BREADY),
    .m_axi_weight_BRESP(2'd0),
    .m_axi_weight_BID(1'd0),
    .m_axi_weight_BUSER(1'd0),
    .weight_offset(weight3_reg_590),
    .weight_offset1(tmp_38_reg_650),
    .weight_buffer_address0(grp_load_weight_fu_300_weight_buffer_address0),
    .weight_buffer_ce0(grp_load_weight_fu_300_weight_buffer_ce0),
    .weight_buffer_we0(grp_load_weight_fu_300_weight_buffer_we0),
    .weight_buffer_d0(grp_load_weight_fu_300_weight_buffer_d0),
    .chin(chin_read_reg_572),
    .kx(kx_read_reg_559),
    .ky(ky_read_reg_551)
);

conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32bkb_U29(
    .din0(conv_sum_reg_693),
    .din1(gmem_addr_read_reg_698),
    .dout(tmp_47_fu_312_p2)
);

conv_sdiv_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_sdiv_32ns_32dEe_U30(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_374_ap_start),
    .done(grp_fu_374_ap_done),
    .din0(grp_fu_374_p0),
    .din1(stride),
    .ce(1'b1),
    .dout(grp_fu_374_p2)
);

conv_sdiv_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_sdiv_32ns_32dEe_U31(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_392_ap_start),
    .done(grp_fu_392_ap_done),
    .din0(grp_fu_392_p0),
    .din1(stride),
    .ce(1'b1),
    .dout(grp_fu_392_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state43)) begin
            if ((ap_sig_ioackin_gmem_ARREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_ARREADY <= 1'b0;
            end else if ((gmem_ARREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state51)) begin
            if ((ap_sig_ioackin_gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state52)) begin
            if ((ap_sig_ioackin_gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((gmem_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_load_feature_fu_281_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_45_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
            grp_load_feature_fu_281_ap_start_reg <= 1'b1;
        end else if ((grp_load_feature_fu_281_ap_ready == 1'b1)) begin
            grp_load_feature_fu_281_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_load_weight_fu_300_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state41)) begin
            grp_load_weight_fu_300_ap_start_reg <= 1'b1;
        end else if ((grp_load_weight_fu_300_ap_ready == 1'b1)) begin
            grp_load_weight_fu_300_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_multiply_fu_272_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
            grp_multiply_fu_272_ap_start_reg <= 1'b1;
        end else if ((grp_multiply_fu_272_ap_ready == 1'b1)) begin
            grp_multiply_fu_272_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_41_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state38))) begin
        cout_reg_226 <= cout_1_reg_645;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        cout_reg_226 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_45_fu_494_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state39))) begin
        h_reg_248 <= h_1_reg_669;
    end else if (((tmp_36_fu_429_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        h_reg_248 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_41_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state38))) begin
        phi_mul_reg_237 <= next_mul_reg_637;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        phi_mul_reg_237 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
        w_reg_260 <= w_1_reg_682;
    end else if (((tmp_41_fu_469_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
        w_reg_260 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        chin_read_reg_572 <= chin;
        chout_read_reg_567 <= chout;
        feature_in1_reg_595 <= {{feature_in[31:2]}};
        hin_read_reg_541 <= hin;
        kx_read_reg_559 <= kx;
        ky_read_reg_551 <= ky;
        padding_read_reg_529 <= padding;
        stride_read_reg_534 <= stride;
        tmp_39_reg_585 <= {{feature_out[31:2]}};
        tmp_reg_580 <= {{bias[31:2]}};
        weight3_reg_590 <= {{weight[31:2]}};
        win_read_reg_546 <= win;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_multiply_fu_272_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        conv_sum_reg_693 <= grp_multiply_fu_272_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        cout_1_reg_645 <= cout_1_fu_434_p2;
        next_mul_reg_637 <= next_mul_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_45_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
        gmem_addr_1_reg_687 <= feature_out6_sum_cas_fu_519_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
        gmem_addr_read_reg_698 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_36_fu_429_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        gmem_addr_reg_655 <= bias8_sum_cast_fu_450_p1;
        tmp_38_reg_650 <= tmp_38_fu_440_p2;
        tmp_40_reg_661 <= tmp_40_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        h_1_reg_669 <= h_1_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        hout_reg_626 <= hout_fu_410_p2;
        tmp1_reg_632 <= tmp1_fu_416_p2;
        tmp_1_cast_reg_610[29 : 0] <= tmp_1_cast_fu_398_p1[29 : 0];
        tmp_2_cast_reg_615[29 : 0] <= tmp_2_cast_fu_401_p1[29 : 0];
        wout_reg_620 <= wout_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_41_fu_469_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
        tmp_44_reg_674 <= tmp_44_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
        tmp_47_reg_703 <= tmp_47_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        w_1_reg_682 <= w_1_fu_499_p2;
    end
end

always @ (*) begin
    if (((tmp_36_fu_429_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_36_fu_429_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        feature_buffer_address0 = grp_load_feature_fu_281_feature_buffer_address0;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        feature_buffer_address0 = grp_multiply_fu_272_feature_buffer_address0;
    end else begin
        feature_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        feature_buffer_ce0 = grp_load_feature_fu_281_feature_buffer_ce0;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        feature_buffer_ce0 = grp_multiply_fu_272_feature_buffer_ce0;
    end else begin
        feature_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        feature_buffer_we0 = grp_load_feature_fu_281_feature_buffer_we0;
    end else begin
        feature_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state43))) begin
        gmem_ARADDR = gmem_addr_reg_655;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_ARADDR = grp_load_weight_fu_300_m_axi_weight_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state40) | ((tmp_45_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)))) begin
        gmem_ARADDR = grp_load_feature_fu_281_m_axi_feature_in_ARADDR;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_ARBURST = grp_load_weight_fu_300_m_axi_weight_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state40) | ((tmp_45_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)))) begin
        gmem_ARBURST = grp_load_feature_fu_281_m_axi_feature_in_ARBURST;
    end else begin
        gmem_ARBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_ARCACHE = grp_load_weight_fu_300_m_axi_weight_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state40) | ((tmp_45_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)))) begin
        gmem_ARCACHE = grp_load_feature_fu_281_m_axi_feature_in_ARCACHE;
    end else begin
        gmem_ARCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_ARID = grp_load_weight_fu_300_m_axi_weight_ARID;
    end else if (((1'b1 == ap_CS_fsm_state40) | ((tmp_45_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)))) begin
        gmem_ARID = grp_load_feature_fu_281_m_axi_feature_in_ARID;
    end else begin
        gmem_ARID = 1'd0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state43))) begin
        gmem_ARLEN = 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_ARLEN = grp_load_weight_fu_300_m_axi_weight_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state40) | ((tmp_45_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)))) begin
        gmem_ARLEN = grp_load_feature_fu_281_m_axi_feature_in_ARLEN;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_ARLOCK = grp_load_weight_fu_300_m_axi_weight_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state40) | ((tmp_45_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)))) begin
        gmem_ARLOCK = grp_load_feature_fu_281_m_axi_feature_in_ARLOCK;
    end else begin
        gmem_ARLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_ARPROT = grp_load_weight_fu_300_m_axi_weight_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state40) | ((tmp_45_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)))) begin
        gmem_ARPROT = grp_load_feature_fu_281_m_axi_feature_in_ARPROT;
    end else begin
        gmem_ARPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_ARQOS = grp_load_weight_fu_300_m_axi_weight_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state40) | ((tmp_45_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)))) begin
        gmem_ARQOS = grp_load_feature_fu_281_m_axi_feature_in_ARQOS;
    end else begin
        gmem_ARQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_ARREGION = grp_load_weight_fu_300_m_axi_weight_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state40) | ((tmp_45_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)))) begin
        gmem_ARREGION = grp_load_feature_fu_281_m_axi_feature_in_ARREGION;
    end else begin
        gmem_ARREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_ARSIZE = grp_load_weight_fu_300_m_axi_weight_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state40) | ((tmp_45_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)))) begin
        gmem_ARSIZE = grp_load_feature_fu_281_m_axi_feature_in_ARSIZE;
    end else begin
        gmem_ARSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_ARUSER = grp_load_weight_fu_300_m_axi_weight_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state40) | ((tmp_45_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)))) begin
        gmem_ARUSER = grp_load_feature_fu_281_m_axi_feature_in_ARUSER;
    end else begin
        gmem_ARUSER = 1'd0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state43))) begin
        gmem_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_ARVALID = grp_load_weight_fu_300_m_axi_weight_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state40) | ((tmp_45_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)))) begin
        gmem_ARVALID = grp_load_feature_fu_281_m_axi_feature_in_ARVALID;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state51))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
        gmem_RREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_RREADY = grp_load_weight_fu_300_m_axi_weight_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state40) | ((tmp_45_fu_494_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state39)))) begin
        gmem_RREADY = grp_load_feature_fu_281_m_axi_feature_in_RREADY;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state52))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_374_ap_start = 1'b1;
    end else begin
        grp_fu_374_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_392_ap_start = 1'b1;
    end else begin
        grp_fu_392_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        weight_buffer_address0 = grp_load_weight_fu_300_weight_buffer_address0;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        weight_buffer_address0 = grp_multiply_fu_272_weight_buffer_address0;
    end else begin
        weight_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        weight_buffer_ce0 = grp_load_weight_fu_300_weight_buffer_ce0;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        weight_buffer_ce0 = grp_multiply_fu_272_weight_buffer_ce0;
    end else begin
        weight_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        weight_buffer_we0 = grp_load_weight_fu_300_weight_buffer_we0;
    end else begin
        weight_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((tmp_36_fu_429_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((tmp_41_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((tmp_45_fu_494_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((grp_load_feature_fu_281_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((grp_load_weight_fu_300_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((grp_multiply_fu_272_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((ap_sig_ioackin_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((ap_sig_ioackin_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bias8_sum_cast_fu_450_p1 = bias8_sum_fu_445_p2;

assign bias8_sum_fu_445_p2 = (cout_cast_fu_425_p1 + tmp_1_cast_reg_610);

assign cout_1_fu_434_p2 = (cout_reg_226 + 31'd1);

assign cout_cast_fu_425_p1 = cout_reg_226;

assign feature_out6_sum_cas_fu_519_p1 = $signed(feature_out6_sum_fu_514_p2);

assign feature_out6_sum_fu_514_p2 = ($signed(tmp_49_cast_fu_510_p1) + $signed(tmp_2_cast_reg_615));

assign grp_fu_374_p0 = (tmp_49_fu_356_p2 + tmp_s_fu_362_p2);

assign grp_fu_392_p0 = (tmp_49_fu_356_p2 + tmp_33_fu_380_p2);

assign grp_load_feature_fu_281_ap_start = grp_load_feature_fu_281_ap_start_reg;

assign grp_load_weight_fu_300_ap_start = grp_load_weight_fu_300_ap_start_reg;

assign grp_multiply_fu_272_ap_start = grp_multiply_fu_272_ap_start_reg;

assign h_1_fu_474_p2 = (h_reg_248 + 31'd1);

assign h_cast_fu_465_p1 = h_reg_248;

assign hout_fu_410_p2 = (32'd1 + grp_fu_392_p2);

assign next_mul_fu_420_p2 = ($signed(phi_mul_reg_237) + $signed(ky_read_reg_551));

assign tmp1_fu_416_p2 = (kx_read_reg_559 * chin_read_reg_572);

assign tmp_1_cast_fu_398_p1 = tmp_reg_580;

assign tmp_2_cast_fu_401_p1 = tmp_39_reg_585;

assign tmp_33_fu_380_p2 = (hin - ky);

assign tmp_36_fu_429_p2 = (($signed(cout_cast_fu_425_p1) < $signed(chout_read_reg_567)) ? 1'b1 : 1'b0);

assign tmp_38_fu_440_p2 = ($signed(tmp1_reg_632) * $signed(phi_mul_reg_237));

assign tmp_40_fu_460_p0 = cout_cast_fu_425_p1;

assign tmp_40_fu_460_p2 = ($signed({{1'b0}, {tmp_40_fu_460_p0}}) * $signed(hout_reg_626));

assign tmp_41_fu_469_p2 = (($signed(h_cast_fu_465_p1) < $signed(hout_reg_626)) ? 1'b1 : 1'b0);

assign tmp_43_fu_480_p2 = (h_cast_fu_465_p1 + tmp_40_reg_661);

assign tmp_44_fu_485_p2 = ($signed(tmp_43_fu_480_p2) * $signed(wout_reg_620));

assign tmp_45_fu_494_p2 = (($signed(w_cast_fu_490_p1) < $signed(wout_reg_620)) ? 1'b1 : 1'b0);

assign tmp_48_fu_505_p2 = (tmp_44_reg_674 + w_cast_fu_490_p1);

assign tmp_49_cast_fu_510_p1 = $signed(tmp_48_fu_505_p2);

assign tmp_49_fu_356_p2 = padding << 32'd1;

assign tmp_s_fu_362_p1 = kx;

assign tmp_s_fu_362_p2 = ($signed(win) - $signed(tmp_s_fu_362_p1));

assign w_1_fu_499_p2 = (w_reg_260 + 31'd1);

assign w_cast_fu_490_p1 = w_reg_260;

assign wout_fu_404_p2 = (32'd1 + grp_fu_374_p2);

always @ (posedge ap_clk) begin
    tmp_1_cast_reg_610[31:30] <= 2'b00;
    tmp_2_cast_reg_615[32:30] <= 3'b000;
end

endmodule //conv
