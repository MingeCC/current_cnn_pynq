-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=50.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=43.750000,HLS_SYN_LAT=77906,HLS_SYN_TPT=none,HLS_SYN_MEM=130,HLS_SYN_DSP=67,HLS_SYN_FF=5098,HLS_SYN_LUT=8104,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (56 downto 0) := "000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (56 downto 0) := "000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (56 downto 0) := "000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (56 downto 0) := "000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (56 downto 0) := "000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (56 downto 0) := "000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (56 downto 0) := "000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (56 downto 0) := "000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (56 downto 0) := "000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (56 downto 0) := "001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (56 downto 0) := "010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (56 downto 0) := "100000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal chin : STD_LOGIC_VECTOR (31 downto 0);
    signal chout : STD_LOGIC_VECTOR (31 downto 0);
    signal kx : STD_LOGIC_VECTOR (31 downto 0);
    signal ky : STD_LOGIC_VECTOR (31 downto 0);
    signal win : STD_LOGIC_VECTOR (31 downto 0);
    signal hin : STD_LOGIC_VECTOR (31 downto 0);
    signal stride : STD_LOGIC_VECTOR (31 downto 0);
    signal padding : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in : STD_LOGIC_VECTOR (31 downto 0);
    signal weight : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_out : STD_LOGIC_VECTOR (31 downto 0);
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal padding_read_reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal stride_read_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal hin_read_reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal win_read_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal ky_read_reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal kx_read_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal chout_read_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal chin_read_reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_580 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_39_reg_585 : STD_LOGIC_VECTOR (29 downto 0);
    signal weight3_reg_590 : STD_LOGIC_VECTOR (29 downto 0);
    signal feature_in1_reg_595 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1_cast_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_cast_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_2_cast_fu_401_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_2_cast_reg_615 : STD_LOGIC_VECTOR (32 downto 0);
    signal wout_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal wout_reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal hout_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal hout_reg_626 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_632 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal cout_1_fu_434_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal cout_1_reg_645 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_38_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_reg_650 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_655 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_1_fu_474_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal h_1_reg_669 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_44_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_1_fu_499_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal w_1_reg_682 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal gmem_addr_1_reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_multiply_fu_272_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_sum_reg_693 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_multiply_fu_272_ap_ready : STD_LOGIC;
    signal grp_multiply_fu_272_ap_done : STD_LOGIC;
    signal gmem_addr_read_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_fu_312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal feature_buffer_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal feature_buffer_ce0 : STD_LOGIC;
    signal feature_buffer_we0 : STD_LOGIC;
    signal feature_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_buffer_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal weight_buffer_ce0 : STD_LOGIC;
    signal weight_buffer_we0 : STD_LOGIC;
    signal weight_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_multiply_fu_272_ap_start : STD_LOGIC;
    signal grp_multiply_fu_272_ap_idle : STD_LOGIC;
    signal grp_multiply_fu_272_feature_buffer_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_multiply_fu_272_feature_buffer_ce0 : STD_LOGIC;
    signal grp_multiply_fu_272_weight_buffer_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_multiply_fu_272_weight_buffer_ce0 : STD_LOGIC;
    signal grp_load_feature_fu_281_ap_start : STD_LOGIC;
    signal grp_load_feature_fu_281_ap_done : STD_LOGIC;
    signal grp_load_feature_fu_281_ap_idle : STD_LOGIC;
    signal grp_load_feature_fu_281_ap_ready : STD_LOGIC;
    signal grp_load_feature_fu_281_m_axi_feature_in_AWVALID : STD_LOGIC;
    signal grp_load_feature_fu_281_m_axi_feature_in_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_WVALID : STD_LOGIC;
    signal grp_load_feature_fu_281_m_axi_feature_in_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_WLAST : STD_LOGIC;
    signal grp_load_feature_fu_281_m_axi_feature_in_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_ARVALID : STD_LOGIC;
    signal grp_load_feature_fu_281_m_axi_feature_in_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_feature_fu_281_m_axi_feature_in_RREADY : STD_LOGIC;
    signal grp_load_feature_fu_281_m_axi_feature_in_BREADY : STD_LOGIC;
    signal grp_load_feature_fu_281_feature_buffer_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_load_feature_fu_281_feature_buffer_ce0 : STD_LOGIC;
    signal grp_load_feature_fu_281_feature_buffer_we0 : STD_LOGIC;
    signal grp_load_feature_fu_281_feature_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_weight_fu_300_ap_start : STD_LOGIC;
    signal grp_load_weight_fu_300_ap_done : STD_LOGIC;
    signal grp_load_weight_fu_300_ap_idle : STD_LOGIC;
    signal grp_load_weight_fu_300_ap_ready : STD_LOGIC;
    signal grp_load_weight_fu_300_m_axi_weight_AWVALID : STD_LOGIC;
    signal grp_load_weight_fu_300_m_axi_weight_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_WVALID : STD_LOGIC;
    signal grp_load_weight_fu_300_m_axi_weight_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_WLAST : STD_LOGIC;
    signal grp_load_weight_fu_300_m_axi_weight_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_ARVALID : STD_LOGIC;
    signal grp_load_weight_fu_300_m_axi_weight_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_weight_fu_300_m_axi_weight_RREADY : STD_LOGIC;
    signal grp_load_weight_fu_300_m_axi_weight_BREADY : STD_LOGIC;
    signal grp_load_weight_fu_300_weight_buffer_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_load_weight_fu_300_weight_buffer_ce0 : STD_LOGIC;
    signal grp_load_weight_fu_300_weight_buffer_we0 : STD_LOGIC;
    signal grp_load_weight_fu_300_weight_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_reg_226 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul_reg_237 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_reg_248 : STD_LOGIC_VECTOR (30 downto 0);
    signal w_reg_260 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_multiply_fu_272_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal grp_load_feature_fu_281_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_load_weight_fu_300_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal bias8_sum_cast_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_out6_sum_cas_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal tmp_s_fu_362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_374_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_cast_fu_425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias8_sum_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_460_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal h_cast_fu_465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_cast_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_cast_fu_510_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal feature_out6_sum_fu_514_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_374_ap_start : STD_LOGIC;
    signal grp_fu_374_ap_done : STD_LOGIC;
    signal grp_fu_392_ap_start : STD_LOGIC;
    signal grp_fu_392_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (56 downto 0);

    component multiply IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        feature_buffer_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        feature_buffer_ce0 : OUT STD_LOGIC;
        feature_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_buffer_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        weight_buffer_ce0 : OUT STD_LOGIC;
        weight_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        chin : IN STD_LOGIC_VECTOR (31 downto 0);
        kx : IN STD_LOGIC_VECTOR (31 downto 0);
        ky : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component load_feature IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_feature_in_AWVALID : OUT STD_LOGIC;
        m_axi_feature_in_AWREADY : IN STD_LOGIC;
        m_axi_feature_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_feature_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_feature_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_feature_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_feature_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_feature_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_feature_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_feature_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_feature_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_feature_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_feature_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_feature_in_WVALID : OUT STD_LOGIC;
        m_axi_feature_in_WREADY : IN STD_LOGIC;
        m_axi_feature_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_feature_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_feature_in_WLAST : OUT STD_LOGIC;
        m_axi_feature_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_feature_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_feature_in_ARVALID : OUT STD_LOGIC;
        m_axi_feature_in_ARREADY : IN STD_LOGIC;
        m_axi_feature_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_feature_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_feature_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_feature_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_feature_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_feature_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_feature_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_feature_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_feature_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_feature_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_feature_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_feature_in_RVALID : IN STD_LOGIC;
        m_axi_feature_in_RREADY : OUT STD_LOGIC;
        m_axi_feature_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_feature_in_RLAST : IN STD_LOGIC;
        m_axi_feature_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_feature_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_feature_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_feature_in_BVALID : IN STD_LOGIC;
        m_axi_feature_in_BREADY : OUT STD_LOGIC;
        m_axi_feature_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_feature_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_feature_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        feature_in_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        feature_buffer_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        feature_buffer_ce0 : OUT STD_LOGIC;
        feature_buffer_we0 : OUT STD_LOGIC;
        feature_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        chin : IN STD_LOGIC_VECTOR (31 downto 0);
        kx : IN STD_LOGIC_VECTOR (31 downto 0);
        ky : IN STD_LOGIC_VECTOR (31 downto 0);
        win : IN STD_LOGIC_VECTOR (31 downto 0);
        hin : IN STD_LOGIC_VECTOR (31 downto 0);
        stride : IN STD_LOGIC_VECTOR (31 downto 0);
        padding : IN STD_LOGIC_VECTOR (31 downto 0);
        x : IN STD_LOGIC_VECTOR (30 downto 0);
        y : IN STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component load_weight IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_weight_AWVALID : OUT STD_LOGIC;
        m_axi_weight_AWREADY : IN STD_LOGIC;
        m_axi_weight_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weight_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weight_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weight_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weight_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weight_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weight_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weight_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weight_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weight_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_WVALID : OUT STD_LOGIC;
        m_axi_weight_WREADY : IN STD_LOGIC;
        m_axi_weight_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weight_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weight_WLAST : OUT STD_LOGIC;
        m_axi_weight_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_ARVALID : OUT STD_LOGIC;
        m_axi_weight_ARREADY : IN STD_LOGIC;
        m_axi_weight_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weight_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weight_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weight_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weight_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weight_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weight_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weight_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weight_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weight_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_RVALID : IN STD_LOGIC;
        m_axi_weight_RREADY : OUT STD_LOGIC;
        m_axi_weight_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weight_RLAST : IN STD_LOGIC;
        m_axi_weight_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weight_BVALID : IN STD_LOGIC;
        m_axi_weight_BREADY : OUT STD_LOGIC;
        m_axi_weight_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weight_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weight_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weight_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        weight_offset1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_buffer_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        weight_buffer_ce0 : OUT STD_LOGIC;
        weight_buffer_we0 : OUT STD_LOGIC;
        weight_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        chin : IN STD_LOGIC_VECTOR (31 downto 0);
        kx : IN STD_LOGIC_VECTOR (31 downto 0);
        ky : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_sdiv_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_feature_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        chin : OUT STD_LOGIC_VECTOR (31 downto 0);
        chout : OUT STD_LOGIC_VECTOR (31 downto 0);
        kx : OUT STD_LOGIC_VECTOR (31 downto 0);
        ky : OUT STD_LOGIC_VECTOR (31 downto 0);
        win : OUT STD_LOGIC_VECTOR (31 downto 0);
        hin : OUT STD_LOGIC_VECTOR (31 downto 0);
        stride : OUT STD_LOGIC_VECTOR (31 downto 0);
        padding : OUT STD_LOGIC_VECTOR (31 downto 0);
        feature_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight : OUT STD_LOGIC_VECTOR (31 downto 0);
        feature_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    conv_AXILiteS_s_axi_U : component conv_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        chin => chin,
        chout => chout,
        kx => kx,
        ky => ky,
        win => win,
        hin => hin,
        stride => stride,
        padding => padding,
        feature_in => feature_in,
        weight => weight,
        feature_out => feature_out,
        bias => bias);

    conv_gmem_m_axi_U : component conv_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => gmem_ARID,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => gmem_ARSIZE,
        I_ARLOCK => gmem_ARLOCK,
        I_ARCACHE => gmem_ARCACHE,
        I_ARQOS => gmem_ARQOS,
        I_ARPROT => gmem_ARPROT,
        I_ARUSER => gmem_ARUSER,
        I_ARBURST => gmem_ARBURST,
        I_ARREGION => gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_1_reg_687,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => tmp_47_reg_703,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    feature_buffer_U : component conv_feature_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 25600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => feature_buffer_address0,
        ce0 => feature_buffer_ce0,
        we0 => feature_buffer_we0,
        d0 => grp_load_feature_fu_281_feature_buffer_d0,
        q0 => feature_buffer_q0);

    weight_buffer_U : component conv_feature_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 25600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weight_buffer_address0,
        ce0 => weight_buffer_ce0,
        we0 => weight_buffer_we0,
        d0 => grp_load_weight_fu_300_weight_buffer_d0,
        q0 => weight_buffer_q0);

    grp_multiply_fu_272 : component multiply
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_multiply_fu_272_ap_start,
        ap_done => grp_multiply_fu_272_ap_done,
        ap_idle => grp_multiply_fu_272_ap_idle,
        ap_ready => grp_multiply_fu_272_ap_ready,
        feature_buffer_address0 => grp_multiply_fu_272_feature_buffer_address0,
        feature_buffer_ce0 => grp_multiply_fu_272_feature_buffer_ce0,
        feature_buffer_q0 => feature_buffer_q0,
        weight_buffer_address0 => grp_multiply_fu_272_weight_buffer_address0,
        weight_buffer_ce0 => grp_multiply_fu_272_weight_buffer_ce0,
        weight_buffer_q0 => weight_buffer_q0,
        chin => chin_read_reg_572,
        kx => kx_read_reg_559,
        ky => ky_read_reg_551,
        ap_return => grp_multiply_fu_272_ap_return);

    grp_load_feature_fu_281 : component load_feature
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_load_feature_fu_281_ap_start,
        ap_done => grp_load_feature_fu_281_ap_done,
        ap_idle => grp_load_feature_fu_281_ap_idle,
        ap_ready => grp_load_feature_fu_281_ap_ready,
        m_axi_feature_in_AWVALID => grp_load_feature_fu_281_m_axi_feature_in_AWVALID,
        m_axi_feature_in_AWREADY => ap_const_logic_0,
        m_axi_feature_in_AWADDR => grp_load_feature_fu_281_m_axi_feature_in_AWADDR,
        m_axi_feature_in_AWID => grp_load_feature_fu_281_m_axi_feature_in_AWID,
        m_axi_feature_in_AWLEN => grp_load_feature_fu_281_m_axi_feature_in_AWLEN,
        m_axi_feature_in_AWSIZE => grp_load_feature_fu_281_m_axi_feature_in_AWSIZE,
        m_axi_feature_in_AWBURST => grp_load_feature_fu_281_m_axi_feature_in_AWBURST,
        m_axi_feature_in_AWLOCK => grp_load_feature_fu_281_m_axi_feature_in_AWLOCK,
        m_axi_feature_in_AWCACHE => grp_load_feature_fu_281_m_axi_feature_in_AWCACHE,
        m_axi_feature_in_AWPROT => grp_load_feature_fu_281_m_axi_feature_in_AWPROT,
        m_axi_feature_in_AWQOS => grp_load_feature_fu_281_m_axi_feature_in_AWQOS,
        m_axi_feature_in_AWREGION => grp_load_feature_fu_281_m_axi_feature_in_AWREGION,
        m_axi_feature_in_AWUSER => grp_load_feature_fu_281_m_axi_feature_in_AWUSER,
        m_axi_feature_in_WVALID => grp_load_feature_fu_281_m_axi_feature_in_WVALID,
        m_axi_feature_in_WREADY => ap_const_logic_0,
        m_axi_feature_in_WDATA => grp_load_feature_fu_281_m_axi_feature_in_WDATA,
        m_axi_feature_in_WSTRB => grp_load_feature_fu_281_m_axi_feature_in_WSTRB,
        m_axi_feature_in_WLAST => grp_load_feature_fu_281_m_axi_feature_in_WLAST,
        m_axi_feature_in_WID => grp_load_feature_fu_281_m_axi_feature_in_WID,
        m_axi_feature_in_WUSER => grp_load_feature_fu_281_m_axi_feature_in_WUSER,
        m_axi_feature_in_ARVALID => grp_load_feature_fu_281_m_axi_feature_in_ARVALID,
        m_axi_feature_in_ARREADY => gmem_ARREADY,
        m_axi_feature_in_ARADDR => grp_load_feature_fu_281_m_axi_feature_in_ARADDR,
        m_axi_feature_in_ARID => grp_load_feature_fu_281_m_axi_feature_in_ARID,
        m_axi_feature_in_ARLEN => grp_load_feature_fu_281_m_axi_feature_in_ARLEN,
        m_axi_feature_in_ARSIZE => grp_load_feature_fu_281_m_axi_feature_in_ARSIZE,
        m_axi_feature_in_ARBURST => grp_load_feature_fu_281_m_axi_feature_in_ARBURST,
        m_axi_feature_in_ARLOCK => grp_load_feature_fu_281_m_axi_feature_in_ARLOCK,
        m_axi_feature_in_ARCACHE => grp_load_feature_fu_281_m_axi_feature_in_ARCACHE,
        m_axi_feature_in_ARPROT => grp_load_feature_fu_281_m_axi_feature_in_ARPROT,
        m_axi_feature_in_ARQOS => grp_load_feature_fu_281_m_axi_feature_in_ARQOS,
        m_axi_feature_in_ARREGION => grp_load_feature_fu_281_m_axi_feature_in_ARREGION,
        m_axi_feature_in_ARUSER => grp_load_feature_fu_281_m_axi_feature_in_ARUSER,
        m_axi_feature_in_RVALID => gmem_RVALID,
        m_axi_feature_in_RREADY => grp_load_feature_fu_281_m_axi_feature_in_RREADY,
        m_axi_feature_in_RDATA => gmem_RDATA,
        m_axi_feature_in_RLAST => gmem_RLAST,
        m_axi_feature_in_RID => gmem_RID,
        m_axi_feature_in_RUSER => gmem_RUSER,
        m_axi_feature_in_RRESP => gmem_RRESP,
        m_axi_feature_in_BVALID => ap_const_logic_0,
        m_axi_feature_in_BREADY => grp_load_feature_fu_281_m_axi_feature_in_BREADY,
        m_axi_feature_in_BRESP => ap_const_lv2_0,
        m_axi_feature_in_BID => ap_const_lv1_0,
        m_axi_feature_in_BUSER => ap_const_lv1_0,
        feature_in_offset => feature_in1_reg_595,
        feature_buffer_address0 => grp_load_feature_fu_281_feature_buffer_address0,
        feature_buffer_ce0 => grp_load_feature_fu_281_feature_buffer_ce0,
        feature_buffer_we0 => grp_load_feature_fu_281_feature_buffer_we0,
        feature_buffer_d0 => grp_load_feature_fu_281_feature_buffer_d0,
        chin => chin_read_reg_572,
        kx => kx_read_reg_559,
        ky => ky_read_reg_551,
        win => win_read_reg_546,
        hin => hin_read_reg_541,
        stride => stride_read_reg_534,
        padding => padding_read_reg_529,
        x => w_reg_260,
        y => h_reg_248);

    grp_load_weight_fu_300 : component load_weight
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_load_weight_fu_300_ap_start,
        ap_done => grp_load_weight_fu_300_ap_done,
        ap_idle => grp_load_weight_fu_300_ap_idle,
        ap_ready => grp_load_weight_fu_300_ap_ready,
        m_axi_weight_AWVALID => grp_load_weight_fu_300_m_axi_weight_AWVALID,
        m_axi_weight_AWREADY => ap_const_logic_0,
        m_axi_weight_AWADDR => grp_load_weight_fu_300_m_axi_weight_AWADDR,
        m_axi_weight_AWID => grp_load_weight_fu_300_m_axi_weight_AWID,
        m_axi_weight_AWLEN => grp_load_weight_fu_300_m_axi_weight_AWLEN,
        m_axi_weight_AWSIZE => grp_load_weight_fu_300_m_axi_weight_AWSIZE,
        m_axi_weight_AWBURST => grp_load_weight_fu_300_m_axi_weight_AWBURST,
        m_axi_weight_AWLOCK => grp_load_weight_fu_300_m_axi_weight_AWLOCK,
        m_axi_weight_AWCACHE => grp_load_weight_fu_300_m_axi_weight_AWCACHE,
        m_axi_weight_AWPROT => grp_load_weight_fu_300_m_axi_weight_AWPROT,
        m_axi_weight_AWQOS => grp_load_weight_fu_300_m_axi_weight_AWQOS,
        m_axi_weight_AWREGION => grp_load_weight_fu_300_m_axi_weight_AWREGION,
        m_axi_weight_AWUSER => grp_load_weight_fu_300_m_axi_weight_AWUSER,
        m_axi_weight_WVALID => grp_load_weight_fu_300_m_axi_weight_WVALID,
        m_axi_weight_WREADY => ap_const_logic_0,
        m_axi_weight_WDATA => grp_load_weight_fu_300_m_axi_weight_WDATA,
        m_axi_weight_WSTRB => grp_load_weight_fu_300_m_axi_weight_WSTRB,
        m_axi_weight_WLAST => grp_load_weight_fu_300_m_axi_weight_WLAST,
        m_axi_weight_WID => grp_load_weight_fu_300_m_axi_weight_WID,
        m_axi_weight_WUSER => grp_load_weight_fu_300_m_axi_weight_WUSER,
        m_axi_weight_ARVALID => grp_load_weight_fu_300_m_axi_weight_ARVALID,
        m_axi_weight_ARREADY => gmem_ARREADY,
        m_axi_weight_ARADDR => grp_load_weight_fu_300_m_axi_weight_ARADDR,
        m_axi_weight_ARID => grp_load_weight_fu_300_m_axi_weight_ARID,
        m_axi_weight_ARLEN => grp_load_weight_fu_300_m_axi_weight_ARLEN,
        m_axi_weight_ARSIZE => grp_load_weight_fu_300_m_axi_weight_ARSIZE,
        m_axi_weight_ARBURST => grp_load_weight_fu_300_m_axi_weight_ARBURST,
        m_axi_weight_ARLOCK => grp_load_weight_fu_300_m_axi_weight_ARLOCK,
        m_axi_weight_ARCACHE => grp_load_weight_fu_300_m_axi_weight_ARCACHE,
        m_axi_weight_ARPROT => grp_load_weight_fu_300_m_axi_weight_ARPROT,
        m_axi_weight_ARQOS => grp_load_weight_fu_300_m_axi_weight_ARQOS,
        m_axi_weight_ARREGION => grp_load_weight_fu_300_m_axi_weight_ARREGION,
        m_axi_weight_ARUSER => grp_load_weight_fu_300_m_axi_weight_ARUSER,
        m_axi_weight_RVALID => gmem_RVALID,
        m_axi_weight_RREADY => grp_load_weight_fu_300_m_axi_weight_RREADY,
        m_axi_weight_RDATA => gmem_RDATA,
        m_axi_weight_RLAST => gmem_RLAST,
        m_axi_weight_RID => gmem_RID,
        m_axi_weight_RUSER => gmem_RUSER,
        m_axi_weight_RRESP => gmem_RRESP,
        m_axi_weight_BVALID => ap_const_logic_0,
        m_axi_weight_BREADY => grp_load_weight_fu_300_m_axi_weight_BREADY,
        m_axi_weight_BRESP => ap_const_lv2_0,
        m_axi_weight_BID => ap_const_lv1_0,
        m_axi_weight_BUSER => ap_const_lv1_0,
        weight_offset => weight3_reg_590,
        weight_offset1 => tmp_38_reg_650,
        weight_buffer_address0 => grp_load_weight_fu_300_weight_buffer_address0,
        weight_buffer_ce0 => grp_load_weight_fu_300_weight_buffer_ce0,
        weight_buffer_we0 => grp_load_weight_fu_300_weight_buffer_we0,
        weight_buffer_d0 => grp_load_weight_fu_300_weight_buffer_d0,
        chin => chin_read_reg_572,
        kx => kx_read_reg_559,
        ky => ky_read_reg_551);

    conv_fadd_32ns_32bkb_U29 : component conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => conv_sum_reg_693,
        din1 => gmem_addr_read_reg_698,
        dout => tmp_47_fu_312_p2);

    conv_sdiv_32ns_32dEe_U30 : component conv_sdiv_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_374_ap_start,
        done => grp_fu_374_ap_done,
        din0 => grp_fu_374_p0,
        din1 => stride,
        ce => ap_const_logic_1,
        dout => grp_fu_374_p2);

    conv_sdiv_32ns_32dEe_U31 : component conv_sdiv_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_392_ap_start,
        done => grp_fu_392_ap_done,
        din0 => grp_fu_392_p0,
        din1 => stride,
        ce => ap_const_logic_1,
        dout => grp_fu_392_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                    if ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                    elsif ((gmem_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                    if ((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((gmem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                    if ((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((gmem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    grp_load_feature_fu_281_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_load_feature_fu_281_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_45_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                    grp_load_feature_fu_281_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load_feature_fu_281_ap_ready = ap_const_logic_1)) then 
                    grp_load_feature_fu_281_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_load_weight_fu_300_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_load_weight_fu_300_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                    grp_load_weight_fu_300_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load_weight_fu_300_ap_ready = ap_const_logic_1)) then 
                    grp_load_weight_fu_300_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_multiply_fu_272_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_multiply_fu_272_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                    grp_multiply_fu_272_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_multiply_fu_272_ap_ready = ap_const_logic_1)) then 
                    grp_multiply_fu_272_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cout_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_41_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                cout_reg_226 <= cout_1_reg_645;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                cout_reg_226 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    h_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_45_fu_494_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                h_reg_248 <= h_1_reg_669;
            elsif (((tmp_36_fu_429_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                h_reg_248 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_41_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                phi_mul_reg_237 <= next_mul_reg_637;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                phi_mul_reg_237 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                w_reg_260 <= w_1_reg_682;
            elsif (((tmp_41_fu_469_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                w_reg_260 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                chin_read_reg_572 <= chin;
                chout_read_reg_567 <= chout;
                feature_in1_reg_595 <= feature_in(31 downto 2);
                hin_read_reg_541 <= hin;
                kx_read_reg_559 <= kx;
                ky_read_reg_551 <= ky;
                padding_read_reg_529 <= padding;
                stride_read_reg_534 <= stride;
                tmp_39_reg_585 <= feature_out(31 downto 2);
                tmp_reg_580 <= bias(31 downto 2);
                weight3_reg_590 <= weight(31 downto 2);
                win_read_reg_546 <= win;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_multiply_fu_272_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                conv_sum_reg_693 <= grp_multiply_fu_272_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                cout_1_reg_645 <= cout_1_fu_434_p2;
                next_mul_reg_637 <= next_mul_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_45_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                gmem_addr_1_reg_687 <= feature_out6_sum_cas_fu_519_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                gmem_addr_read_reg_698 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_36_fu_429_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                gmem_addr_reg_655 <= bias8_sum_cast_fu_450_p1(32 - 1 downto 0);
                tmp_38_reg_650 <= tmp_38_fu_440_p2;
                tmp_40_reg_661 <= tmp_40_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                h_1_reg_669 <= h_1_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                hout_reg_626 <= hout_fu_410_p2;
                tmp1_reg_632 <= tmp1_fu_416_p2;
                    tmp_1_cast_reg_610(29 downto 0) <= tmp_1_cast_fu_398_p1(29 downto 0);
                    tmp_2_cast_reg_615(29 downto 0) <= tmp_2_cast_fu_401_p1(29 downto 0);
                wout_reg_620 <= wout_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_41_fu_469_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                tmp_44_reg_674 <= tmp_44_fu_485_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                tmp_47_reg_703 <= tmp_47_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                w_1_reg_682 <= w_1_fu_499_p2;
            end if;
        end if;
    end process;
    tmp_1_cast_reg_610(31 downto 30) <= "00";
    tmp_2_cast_reg_615(32 downto 30) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state43, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state57, gmem_RVALID, gmem_BVALID, ap_CS_fsm_state37, tmp_36_fu_429_p2, ap_CS_fsm_state38, tmp_41_fu_469_p2, ap_CS_fsm_state39, tmp_45_fu_494_p2, ap_CS_fsm_state44, grp_multiply_fu_272_ap_done, ap_sig_ioackin_gmem_AWREADY, grp_load_feature_fu_281_ap_done, grp_load_weight_fu_300_ap_done, ap_sig_ioackin_gmem_ARREADY, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_sig_ioackin_gmem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((tmp_36_fu_429_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                if (((tmp_41_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                if (((tmp_45_fu_494_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                if (((grp_load_feature_fu_281_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((grp_load_weight_fu_300_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (((grp_multiply_fu_272_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                if (((ap_sig_ioackin_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);

    ap_done_assign_proc : process(ap_CS_fsm_state37, tmp_36_fu_429_p2)
    begin
        if (((tmp_36_fu_429_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state37, tmp_36_fu_429_p2)
    begin
        if (((tmp_36_fu_429_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    bias8_sum_cast_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bias8_sum_fu_445_p2),64));
    bias8_sum_fu_445_p2 <= std_logic_vector(unsigned(cout_cast_fu_425_p1) + unsigned(tmp_1_cast_reg_610));
    cout_1_fu_434_p2 <= std_logic_vector(unsigned(cout_reg_226) + unsigned(ap_const_lv31_1));
    cout_cast_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cout_reg_226),32));

    feature_buffer_address0_assign_proc : process(ap_CS_fsm_state44, grp_multiply_fu_272_feature_buffer_address0, grp_load_feature_fu_281_feature_buffer_address0, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            feature_buffer_address0 <= grp_load_feature_fu_281_feature_buffer_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            feature_buffer_address0 <= grp_multiply_fu_272_feature_buffer_address0;
        else 
            feature_buffer_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    feature_buffer_ce0_assign_proc : process(ap_CS_fsm_state44, grp_multiply_fu_272_feature_buffer_ce0, grp_load_feature_fu_281_feature_buffer_ce0, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            feature_buffer_ce0 <= grp_load_feature_fu_281_feature_buffer_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            feature_buffer_ce0 <= grp_multiply_fu_272_feature_buffer_ce0;
        else 
            feature_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    feature_buffer_we0_assign_proc : process(grp_load_feature_fu_281_feature_buffer_we0, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            feature_buffer_we0 <= grp_load_feature_fu_281_feature_buffer_we0;
        else 
            feature_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

        feature_out6_sum_cas_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(feature_out6_sum_fu_514_p2),64));

    feature_out6_sum_fu_514_p2 <= std_logic_vector(signed(tmp_49_cast_fu_510_p1) + signed(tmp_2_cast_reg_615));

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state43, gmem_addr_reg_655, ap_CS_fsm_state39, tmp_45_fu_494_p2, grp_load_feature_fu_281_m_axi_feature_in_ARADDR, grp_load_weight_fu_300_m_axi_weight_ARADDR, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_reg_ioackin_gmem_ARREADY)
    begin
        if (((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            gmem_ARADDR <= gmem_addr_reg_655;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem_ARADDR <= grp_load_weight_fu_300_m_axi_weight_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or ((tmp_45_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            gmem_ARADDR <= grp_load_feature_fu_281_m_axi_feature_in_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARBURST_assign_proc : process(ap_CS_fsm_state39, tmp_45_fu_494_p2, grp_load_feature_fu_281_m_axi_feature_in_ARBURST, grp_load_weight_fu_300_m_axi_weight_ARBURST, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem_ARBURST <= grp_load_weight_fu_300_m_axi_weight_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or ((tmp_45_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            gmem_ARBURST <= grp_load_feature_fu_281_m_axi_feature_in_ARBURST;
        else 
            gmem_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    gmem_ARCACHE_assign_proc : process(ap_CS_fsm_state39, tmp_45_fu_494_p2, grp_load_feature_fu_281_m_axi_feature_in_ARCACHE, grp_load_weight_fu_300_m_axi_weight_ARCACHE, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem_ARCACHE <= grp_load_weight_fu_300_m_axi_weight_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or ((tmp_45_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            gmem_ARCACHE <= grp_load_feature_fu_281_m_axi_feature_in_ARCACHE;
        else 
            gmem_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARID_assign_proc : process(ap_CS_fsm_state39, tmp_45_fu_494_p2, grp_load_feature_fu_281_m_axi_feature_in_ARID, grp_load_weight_fu_300_m_axi_weight_ARID, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem_ARID <= grp_load_weight_fu_300_m_axi_weight_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or ((tmp_45_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            gmem_ARID <= grp_load_feature_fu_281_m_axi_feature_in_ARID;
        else 
            gmem_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state39, tmp_45_fu_494_p2, grp_load_feature_fu_281_m_axi_feature_in_ARLEN, grp_load_weight_fu_300_m_axi_weight_ARLEN, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_reg_ioackin_gmem_ARREADY)
    begin
        if (((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            gmem_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem_ARLEN <= grp_load_weight_fu_300_m_axi_weight_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or ((tmp_45_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            gmem_ARLEN <= grp_load_feature_fu_281_m_axi_feature_in_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLOCK_assign_proc : process(ap_CS_fsm_state39, tmp_45_fu_494_p2, grp_load_feature_fu_281_m_axi_feature_in_ARLOCK, grp_load_weight_fu_300_m_axi_weight_ARLOCK, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem_ARLOCK <= grp_load_weight_fu_300_m_axi_weight_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or ((tmp_45_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            gmem_ARLOCK <= grp_load_feature_fu_281_m_axi_feature_in_ARLOCK;
        else 
            gmem_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    gmem_ARPROT_assign_proc : process(ap_CS_fsm_state39, tmp_45_fu_494_p2, grp_load_feature_fu_281_m_axi_feature_in_ARPROT, grp_load_weight_fu_300_m_axi_weight_ARPROT, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem_ARPROT <= grp_load_weight_fu_300_m_axi_weight_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or ((tmp_45_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            gmem_ARPROT <= grp_load_feature_fu_281_m_axi_feature_in_ARPROT;
        else 
            gmem_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    gmem_ARQOS_assign_proc : process(ap_CS_fsm_state39, tmp_45_fu_494_p2, grp_load_feature_fu_281_m_axi_feature_in_ARQOS, grp_load_weight_fu_300_m_axi_weight_ARQOS, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem_ARQOS <= grp_load_weight_fu_300_m_axi_weight_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or ((tmp_45_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            gmem_ARQOS <= grp_load_feature_fu_281_m_axi_feature_in_ARQOS;
        else 
            gmem_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARREGION_assign_proc : process(ap_CS_fsm_state39, tmp_45_fu_494_p2, grp_load_feature_fu_281_m_axi_feature_in_ARREGION, grp_load_weight_fu_300_m_axi_weight_ARREGION, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem_ARREGION <= grp_load_weight_fu_300_m_axi_weight_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or ((tmp_45_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            gmem_ARREGION <= grp_load_feature_fu_281_m_axi_feature_in_ARREGION;
        else 
            gmem_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARSIZE_assign_proc : process(ap_CS_fsm_state39, tmp_45_fu_494_p2, grp_load_feature_fu_281_m_axi_feature_in_ARSIZE, grp_load_weight_fu_300_m_axi_weight_ARSIZE, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem_ARSIZE <= grp_load_weight_fu_300_m_axi_weight_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or ((tmp_45_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            gmem_ARSIZE <= grp_load_feature_fu_281_m_axi_feature_in_ARSIZE;
        else 
            gmem_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    gmem_ARUSER_assign_proc : process(ap_CS_fsm_state39, tmp_45_fu_494_p2, grp_load_feature_fu_281_m_axi_feature_in_ARUSER, grp_load_weight_fu_300_m_axi_weight_ARUSER, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem_ARUSER <= grp_load_weight_fu_300_m_axi_weight_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or ((tmp_45_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            gmem_ARUSER <= grp_load_feature_fu_281_m_axi_feature_in_ARUSER;
        else 
            gmem_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state39, tmp_45_fu_494_p2, grp_load_feature_fu_281_m_axi_feature_in_ARVALID, grp_load_weight_fu_300_m_axi_weight_ARVALID, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_reg_ioackin_gmem_ARREADY)
    begin
        if (((ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem_ARVALID <= grp_load_weight_fu_300_m_axi_weight_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or ((tmp_45_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            gmem_ARVALID <= grp_load_feature_fu_281_m_axi_feature_in_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state51, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state57, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state50, gmem_RVALID, ap_CS_fsm_state39, tmp_45_fu_494_p2, grp_load_feature_fu_281_m_axi_feature_in_RREADY, grp_load_weight_fu_300_m_axi_weight_RREADY, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            gmem_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem_RREADY <= grp_load_weight_fu_300_m_axi_weight_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or ((tmp_45_fu_494_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            gmem_RREADY <= grp_load_feature_fu_281_m_axi_feature_in_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state52, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_reg_ioackin_gmem_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_374_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_374_ap_start <= ap_const_logic_1;
        else 
            grp_fu_374_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_374_p0 <= std_logic_vector(unsigned(tmp_49_fu_356_p2) + unsigned(tmp_s_fu_362_p2));

    grp_fu_392_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_392_ap_start <= ap_const_logic_1;
        else 
            grp_fu_392_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_392_p0 <= std_logic_vector(unsigned(tmp_49_fu_356_p2) + unsigned(tmp_33_fu_380_p2));
    grp_load_feature_fu_281_ap_start <= grp_load_feature_fu_281_ap_start_reg;
    grp_load_weight_fu_300_ap_start <= grp_load_weight_fu_300_ap_start_reg;
    grp_multiply_fu_272_ap_start <= grp_multiply_fu_272_ap_start_reg;
    h_1_fu_474_p2 <= std_logic_vector(unsigned(h_reg_248) + unsigned(ap_const_lv31_1));
    h_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_248),32));
    hout_fu_410_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(grp_fu_392_p2));
    next_mul_fu_420_p2 <= std_logic_vector(signed(phi_mul_reg_237) + signed(ky_read_reg_551));
    tmp1_fu_416_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kx_read_reg_559) * unsigned(chin_read_reg_572), 32));
    tmp_1_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_580),32));
    tmp_2_cast_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_reg_585),33));
    tmp_33_fu_380_p2 <= std_logic_vector(unsigned(hin) - unsigned(ky));
    tmp_36_fu_429_p2 <= "1" when (signed(cout_cast_fu_425_p1) < signed(chout_read_reg_567)) else "0";
    tmp_38_fu_440_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp1_reg_632) * signed(phi_mul_reg_237))), 32));
    tmp_40_fu_460_p0 <= cout_cast_fu_425_p1(31 - 1 downto 0);
    tmp_40_fu_460_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp_40_fu_460_p0) * signed(hout_reg_626))), 32));
    tmp_41_fu_469_p2 <= "1" when (signed(h_cast_fu_465_p1) < signed(hout_reg_626)) else "0";
    tmp_43_fu_480_p2 <= std_logic_vector(unsigned(h_cast_fu_465_p1) + unsigned(tmp_40_reg_661));
    tmp_44_fu_485_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_43_fu_480_p2) * signed(wout_reg_620))), 32));
    tmp_45_fu_494_p2 <= "1" when (signed(w_cast_fu_490_p1) < signed(wout_reg_620)) else "0";
    tmp_48_fu_505_p2 <= std_logic_vector(unsigned(tmp_44_reg_674) + unsigned(w_cast_fu_490_p1));
        tmp_49_cast_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_48_fu_505_p2),33));

    tmp_49_fu_356_p2 <= std_logic_vector(shift_left(unsigned(padding),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_s_fu_362_p1 <= kx;
    tmp_s_fu_362_p2 <= std_logic_vector(unsigned(win) - unsigned(tmp_s_fu_362_p1));
    w_1_fu_499_p2 <= std_logic_vector(unsigned(w_reg_260) + unsigned(ap_const_lv31_1));
    w_cast_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_260),32));

    weight_buffer_address0_assign_proc : process(ap_CS_fsm_state44, grp_multiply_fu_272_weight_buffer_address0, grp_load_weight_fu_300_weight_buffer_address0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            weight_buffer_address0 <= grp_load_weight_fu_300_weight_buffer_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            weight_buffer_address0 <= grp_multiply_fu_272_weight_buffer_address0;
        else 
            weight_buffer_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    weight_buffer_ce0_assign_proc : process(ap_CS_fsm_state44, grp_multiply_fu_272_weight_buffer_ce0, grp_load_weight_fu_300_weight_buffer_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            weight_buffer_ce0 <= grp_load_weight_fu_300_weight_buffer_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            weight_buffer_ce0 <= grp_multiply_fu_272_weight_buffer_ce0;
        else 
            weight_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_buffer_we0_assign_proc : process(grp_load_weight_fu_300_weight_buffer_we0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            weight_buffer_we0 <= grp_load_weight_fu_300_weight_buffer_we0;
        else 
            weight_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    wout_fu_404_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(grp_fu_374_p2));
end behav;
