// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _load_weight_HH_
#define _load_weight_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct load_weight : public sc_module {
    // Port declarations 60
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_weight_AWVALID;
    sc_in< sc_logic > m_axi_weight_AWREADY;
    sc_out< sc_lv<32> > m_axi_weight_AWADDR;
    sc_out< sc_lv<1> > m_axi_weight_AWID;
    sc_out< sc_lv<32> > m_axi_weight_AWLEN;
    sc_out< sc_lv<3> > m_axi_weight_AWSIZE;
    sc_out< sc_lv<2> > m_axi_weight_AWBURST;
    sc_out< sc_lv<2> > m_axi_weight_AWLOCK;
    sc_out< sc_lv<4> > m_axi_weight_AWCACHE;
    sc_out< sc_lv<3> > m_axi_weight_AWPROT;
    sc_out< sc_lv<4> > m_axi_weight_AWQOS;
    sc_out< sc_lv<4> > m_axi_weight_AWREGION;
    sc_out< sc_lv<1> > m_axi_weight_AWUSER;
    sc_out< sc_logic > m_axi_weight_WVALID;
    sc_in< sc_logic > m_axi_weight_WREADY;
    sc_out< sc_lv<32> > m_axi_weight_WDATA;
    sc_out< sc_lv<4> > m_axi_weight_WSTRB;
    sc_out< sc_logic > m_axi_weight_WLAST;
    sc_out< sc_lv<1> > m_axi_weight_WID;
    sc_out< sc_lv<1> > m_axi_weight_WUSER;
    sc_out< sc_logic > m_axi_weight_ARVALID;
    sc_in< sc_logic > m_axi_weight_ARREADY;
    sc_out< sc_lv<32> > m_axi_weight_ARADDR;
    sc_out< sc_lv<1> > m_axi_weight_ARID;
    sc_out< sc_lv<32> > m_axi_weight_ARLEN;
    sc_out< sc_lv<3> > m_axi_weight_ARSIZE;
    sc_out< sc_lv<2> > m_axi_weight_ARBURST;
    sc_out< sc_lv<2> > m_axi_weight_ARLOCK;
    sc_out< sc_lv<4> > m_axi_weight_ARCACHE;
    sc_out< sc_lv<3> > m_axi_weight_ARPROT;
    sc_out< sc_lv<4> > m_axi_weight_ARQOS;
    sc_out< sc_lv<4> > m_axi_weight_ARREGION;
    sc_out< sc_lv<1> > m_axi_weight_ARUSER;
    sc_in< sc_logic > m_axi_weight_RVALID;
    sc_out< sc_logic > m_axi_weight_RREADY;
    sc_in< sc_lv<32> > m_axi_weight_RDATA;
    sc_in< sc_logic > m_axi_weight_RLAST;
    sc_in< sc_lv<1> > m_axi_weight_RID;
    sc_in< sc_lv<1> > m_axi_weight_RUSER;
    sc_in< sc_lv<2> > m_axi_weight_RRESP;
    sc_in< sc_logic > m_axi_weight_BVALID;
    sc_out< sc_logic > m_axi_weight_BREADY;
    sc_in< sc_lv<2> > m_axi_weight_BRESP;
    sc_in< sc_lv<1> > m_axi_weight_BID;
    sc_in< sc_lv<1> > m_axi_weight_BUSER;
    sc_in< sc_lv<30> > weight_offset;
    sc_in< sc_lv<32> > weight_offset1;
    sc_out< sc_lv<15> > weight_buffer_address0;
    sc_out< sc_logic > weight_buffer_ce0;
    sc_out< sc_logic > weight_buffer_we0;
    sc_out< sc_lv<32> > weight_buffer_d0;
    sc_in< sc_lv<32> > chin;
    sc_in< sc_lv<32> > kx;
    sc_in< sc_lv<32> > ky;


    // Module declarations
    load_weight(sc_module_name name);
    SC_HAS_PROCESS(load_weight);

    ~load_weight();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > weight_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > weight_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > tmp_s_reg_192;
    sc_signal< sc_lv<31> > c_reg_112;
    sc_signal< sc_lv<31> > c_reg_112_pp0_iter1_reg;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > n_fu_130_p2;
    sc_signal< sc_lv<32> > n_reg_180;
    sc_signal< sc_lv<32> > weight_addr_reg_186;
    sc_signal< sc_lv<1> > tmp_s_fu_164_p2;
    sc_signal< sc_lv<1> > tmp_s_reg_192_pp0_iter1_reg;
    sc_signal< sc_lv<31> > c_1_fu_169_p2;
    sc_signal< sc_lv<31> > c_1_reg_196;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > weight_addr_read_reg_201;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<31> > ap_phi_mux_c_phi_fu_116_p4;
    sc_signal< sc_lv<64> > tmp_12_fu_175_p1;
    sc_signal< sc_lv<64> > sum2_cast_fu_150_p1;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_weight_ARREADY;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_weight_ARREADY;
    sc_signal< sc_lv<32> > tmp1_fu_124_p0;
    sc_signal< sc_lv<32> > tmp1_fu_124_p1;
    sc_signal< sc_lv<32> > n_fu_130_p0;
    sc_signal< sc_lv<32> > tmp1_fu_124_p2;
    sc_signal< sc_lv<33> > tmp_3_cast_fu_136_p1;
    sc_signal< sc_lv<33> > sext_cast_fu_140_p1;
    sc_signal< sc_lv<33> > sum2_fu_144_p2;
    sc_signal< sc_lv<32> > c_cast_fu_160_p1;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_pp0_stage0;
    static const sc_lv<10> ap_ST_fsm_state12;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<32> ap_const_lv32_9;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state10_pp0_stage0_iter1();
    void thread_ap_block_state11_pp0_stage0_iter2();
    void thread_ap_block_state9_pp0_stage0_iter0();
    void thread_ap_condition_pp0_exit_iter0_state9();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_c_phi_fu_116_p4();
    void thread_ap_ready();
    void thread_ap_sig_ioackin_m_axi_weight_ARREADY();
    void thread_c_1_fu_169_p2();
    void thread_c_cast_fu_160_p1();
    void thread_m_axi_weight_ARADDR();
    void thread_m_axi_weight_ARBURST();
    void thread_m_axi_weight_ARCACHE();
    void thread_m_axi_weight_ARID();
    void thread_m_axi_weight_ARLEN();
    void thread_m_axi_weight_ARLOCK();
    void thread_m_axi_weight_ARPROT();
    void thread_m_axi_weight_ARQOS();
    void thread_m_axi_weight_ARREGION();
    void thread_m_axi_weight_ARSIZE();
    void thread_m_axi_weight_ARUSER();
    void thread_m_axi_weight_ARVALID();
    void thread_m_axi_weight_AWADDR();
    void thread_m_axi_weight_AWBURST();
    void thread_m_axi_weight_AWCACHE();
    void thread_m_axi_weight_AWID();
    void thread_m_axi_weight_AWLEN();
    void thread_m_axi_weight_AWLOCK();
    void thread_m_axi_weight_AWPROT();
    void thread_m_axi_weight_AWQOS();
    void thread_m_axi_weight_AWREGION();
    void thread_m_axi_weight_AWSIZE();
    void thread_m_axi_weight_AWUSER();
    void thread_m_axi_weight_AWVALID();
    void thread_m_axi_weight_BREADY();
    void thread_m_axi_weight_RREADY();
    void thread_m_axi_weight_WDATA();
    void thread_m_axi_weight_WID();
    void thread_m_axi_weight_WLAST();
    void thread_m_axi_weight_WSTRB();
    void thread_m_axi_weight_WUSER();
    void thread_m_axi_weight_WVALID();
    void thread_n_fu_130_p0();
    void thread_n_fu_130_p2();
    void thread_sext_cast_fu_140_p1();
    void thread_sum2_cast_fu_150_p1();
    void thread_sum2_fu_144_p2();
    void thread_tmp1_fu_124_p0();
    void thread_tmp1_fu_124_p1();
    void thread_tmp1_fu_124_p2();
    void thread_tmp_12_fu_175_p1();
    void thread_tmp_3_cast_fu_136_p1();
    void thread_tmp_s_fu_164_p2();
    void thread_weight_blk_n_AR();
    void thread_weight_blk_n_R();
    void thread_weight_buffer_address0();
    void thread_weight_buffer_ce0();
    void thread_weight_buffer_d0();
    void thread_weight_buffer_we0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
