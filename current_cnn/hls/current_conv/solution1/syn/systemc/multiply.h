// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _multiply_HH_
#define _multiply_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "conv_fadd_32ns_32bkb.h"
#include "conv_fmul_32ns_32cud.h"

namespace ap_rtl {

struct multiply : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<15> > feature_buffer_address0;
    sc_out< sc_logic > feature_buffer_ce0;
    sc_in< sc_lv<32> > feature_buffer_q0;
    sc_out< sc_lv<15> > weight_buffer_address0;
    sc_out< sc_logic > weight_buffer_ce0;
    sc_in< sc_lv<32> > weight_buffer_q0;
    sc_in< sc_lv<32> > chin;
    sc_in< sc_lv<32> > kx;
    sc_in< sc_lv<32> > ky;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    multiply(sc_module_name name);
    SC_HAS_PROCESS(multiply);

    ~multiply();

    sc_trace_file* mVcdFile;

    conv_fadd_32ns_32bkb<1,1,32,32,32>* conv_fadd_32ns_32bkb_U20;
    conv_fmul_32ns_32cud<1,1,32,32,32>* conv_fmul_32ns_32cud_U21;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<96> > indvar_flatten1_reg_88;
    sc_signal< sc_lv<32> > index_reg_99;
    sc_signal< sc_lv<31> > c_reg_110;
    sc_signal< sc_lv<64> > indvar_flatten_reg_121;
    sc_signal< sc_lv<32> > index_1_reg_132;
    sc_signal< sc_lv<31> > i_reg_143;
    sc_signal< sc_lv<32> > sum_2_reg_154;
    sc_signal< sc_lv<32> > index_2_reg_166;
    sc_signal< sc_lv<31> > j_reg_177;
    sc_signal< sc_lv<1> > tmp_fu_200_p2;
    sc_signal< sc_lv<1> > tmp_reg_553;
    sc_signal< sc_lv<32> > smax_cast_fu_218_p1;
    sc_signal< sc_lv<32> > smax_cast_reg_558;
    sc_signal< sc_lv<32> > tmp_2_fu_244_p2;
    sc_signal< sc_lv<32> > tmp_2_reg_563;
    sc_signal< sc_lv<64> > bound_fu_258_p2;
    sc_signal< sc_lv<64> > bound_reg_568;
    sc_signal< sc_lv<96> > bound4_fu_272_p2;
    sc_signal< sc_lv<96> > bound4_reg_573;
    sc_signal< sc_lv<1> > exitcond_flatten1_fu_306_p2;
    sc_signal< sc_lv<1> > exitcond_flatten1_reg_578;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<96> > indvar_flatten_next1_fu_311_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > index_mid2_fu_397_p3;
    sc_signal< sc_lv<31> > c_mid2_fu_405_p3;
    sc_signal< sc_lv<32> > index_1_mid2_fu_467_p3;
    sc_signal< sc_lv<31> > i_mid2_fu_475_p3;
    sc_signal< sc_lv<32> > tmp_10_fu_499_p2;
    sc_signal< sc_lv<31> > j_1_fu_519_p3;
    sc_signal< sc_lv<64> > indvar_flatten_next_fu_533_p3;
    sc_signal< sc_lv<32> > sum_fu_188_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > tmp_4_fu_483_p1;
    sc_signal< sc_lv<64> > tmp_7_fu_494_p1;
    sc_signal< sc_lv<32> > tmp_9_fu_193_p2;
    sc_signal< sc_lv<32> > tmp_fu_200_p0;
    sc_signal< sc_lv<32> > tmp_11_fu_206_p0;
    sc_signal< sc_lv<31> > tmp_11_fu_206_p1;
    sc_signal< sc_lv<31> > smax_fu_210_p3;
    sc_signal< sc_lv<32> > tmp_1_fu_222_p0;
    sc_signal< sc_lv<32> > tmp_12_fu_228_p0;
    sc_signal< sc_lv<1> > tmp_1_fu_222_p2;
    sc_signal< sc_lv<31> > tmp_12_fu_228_p1;
    sc_signal< sc_lv<31> > smax1_fu_232_p3;
    sc_signal< sc_lv<31> > tmp_2_fu_244_p0;
    sc_signal< sc_lv<31> > tmp_2_fu_244_p1;
    sc_signal< sc_lv<32> > cast_fu_250_p0;
    sc_signal< sc_lv<32> > cast1_fu_254_p0;
    sc_signal< sc_lv<32> > bound_fu_258_p0;
    sc_signal< sc_lv<32> > bound_fu_258_p1;
    sc_signal< sc_lv<64> > bound4_fu_272_p0;
    sc_signal< sc_lv<32> > bound4_fu_272_p1;
    sc_signal< sc_lv<32> > tmp_5_fu_282_p0;
    sc_signal< sc_lv<31> > tmp_5_fu_282_p1;
    sc_signal< sc_lv<32> > tmp_5_fu_282_p2;
    sc_signal< sc_lv<32> > i_cast_mid1_fu_287_p1;
    sc_signal< sc_lv<32> > j_cast_fu_297_p1;
    sc_signal< sc_lv<32> > tmp_s_fu_301_p1;
    sc_signal< sc_lv<31> > c_s_fu_317_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_332_p2;
    sc_signal< sc_lv<32> > index_s_fu_327_p2;
    sc_signal< sc_lv<31> > tmp_5_mid1_fu_361_p0;
    sc_signal< sc_lv<32> > tmp_5_mid1_fu_361_p1;
    sc_signal< sc_lv<32> > tmp_5_mid1_fu_361_p2;
    sc_signal< sc_lv<32> > tmp_8_fu_291_p2;
    sc_signal< sc_lv<1> > tmp_s_fu_301_p2;
    sc_signal< sc_lv<31> > i_mid_fu_345_p3;
    sc_signal< sc_lv<32> > index_1_mid_fu_337_p3;
    sc_signal< sc_lv<31> > i_1_fu_413_p2;
    sc_signal< sc_lv<1> > tmp_mid_fu_390_p3;
    sc_signal< sc_lv<32> > index_2_mid_fu_353_p3;
    sc_signal< sc_lv<32> > tmp_7_dup_fu_419_p2;
    sc_signal< sc_lv<32> > i_cast_fu_424_p1;
    sc_signal< sc_lv<32> > tmp_5_mid2_fu_366_p3;
    sc_signal< sc_lv<32> > tmp_9_mid223_v_fu_374_p3;
    sc_signal< sc_lv<32> > tmp_8_mid1_fu_436_p2;
    sc_signal< sc_lv<32> > tmp_9_mid2_v_fu_442_p3;
    sc_signal< sc_lv<32> > tmp_9_mid2_fu_450_p1;
    sc_signal< sc_lv<31> > j_cast_mid_fu_382_p3;
    sc_signal< sc_lv<31> > j_cast_mid2_fu_455_p3;
    sc_signal< sc_lv<32> > index_2_mid2_fu_428_p3;
    sc_signal< sc_lv<32> > j_cast_mid2_cast_fu_463_p1;
    sc_signal< sc_lv<32> > tmp_9_mid2_fu_450_p2;
    sc_signal< sc_lv<32> > tmp_6_fu_488_p2;
    sc_signal< sc_lv<31> > j_op_fu_505_p2;
    sc_signal< sc_lv<31> > j_mid213_op_fu_511_p3;
    sc_signal< sc_lv<64> > indvar_flatten_op_fu_527_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<96> > bound4_fu_272_p00;
    sc_signal< sc_lv<96> > bound4_fu_272_p10;
    sc_signal< sc_lv<64> > bound_fu_258_p00;
    sc_signal< sc_lv<64> > bound_fu_258_p10;
    sc_signal< sc_lv<32> > tmp_2_fu_244_p00;
    sc_signal< sc_lv<32> > tmp_2_fu_244_p10;
    sc_signal< sc_lv<32> > tmp_5_fu_282_p10;
    sc_signal< sc_lv<32> > tmp_5_mid1_fu_361_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<96> ap_const_lv96_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<96> ap_const_lv96_1;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_bound4_fu_272_p0();
    void thread_bound4_fu_272_p00();
    void thread_bound4_fu_272_p1();
    void thread_bound4_fu_272_p10();
    void thread_bound4_fu_272_p2();
    void thread_bound_fu_258_p0();
    void thread_bound_fu_258_p00();
    void thread_bound_fu_258_p1();
    void thread_bound_fu_258_p10();
    void thread_bound_fu_258_p2();
    void thread_c_mid2_fu_405_p3();
    void thread_c_s_fu_317_p2();
    void thread_cast1_fu_254_p0();
    void thread_cast_fu_250_p0();
    void thread_exitcond_flatten1_fu_306_p2();
    void thread_exitcond_flatten_fu_332_p2();
    void thread_feature_buffer_address0();
    void thread_feature_buffer_ce0();
    void thread_i_1_fu_413_p2();
    void thread_i_cast_fu_424_p1();
    void thread_i_cast_mid1_fu_287_p1();
    void thread_i_mid2_fu_475_p3();
    void thread_i_mid_fu_345_p3();
    void thread_index_1_mid2_fu_467_p3();
    void thread_index_1_mid_fu_337_p3();
    void thread_index_2_mid2_fu_428_p3();
    void thread_index_2_mid_fu_353_p3();
    void thread_index_mid2_fu_397_p3();
    void thread_index_s_fu_327_p2();
    void thread_indvar_flatten_next1_fu_311_p2();
    void thread_indvar_flatten_next_fu_533_p3();
    void thread_indvar_flatten_op_fu_527_p2();
    void thread_j_1_fu_519_p3();
    void thread_j_cast_fu_297_p1();
    void thread_j_cast_mid2_cast_fu_463_p1();
    void thread_j_cast_mid2_fu_455_p3();
    void thread_j_cast_mid_fu_382_p3();
    void thread_j_mid213_op_fu_511_p3();
    void thread_j_op_fu_505_p2();
    void thread_smax1_fu_232_p3();
    void thread_smax_cast_fu_218_p1();
    void thread_smax_fu_210_p3();
    void thread_tmp_10_fu_499_p2();
    void thread_tmp_11_fu_206_p0();
    void thread_tmp_11_fu_206_p1();
    void thread_tmp_12_fu_228_p0();
    void thread_tmp_12_fu_228_p1();
    void thread_tmp_1_fu_222_p0();
    void thread_tmp_1_fu_222_p2();
    void thread_tmp_2_fu_244_p0();
    void thread_tmp_2_fu_244_p00();
    void thread_tmp_2_fu_244_p1();
    void thread_tmp_2_fu_244_p10();
    void thread_tmp_2_fu_244_p2();
    void thread_tmp_4_fu_483_p1();
    void thread_tmp_5_fu_282_p0();
    void thread_tmp_5_fu_282_p1();
    void thread_tmp_5_fu_282_p10();
    void thread_tmp_5_fu_282_p2();
    void thread_tmp_5_mid1_fu_361_p0();
    void thread_tmp_5_mid1_fu_361_p00();
    void thread_tmp_5_mid1_fu_361_p1();
    void thread_tmp_5_mid1_fu_361_p2();
    void thread_tmp_5_mid2_fu_366_p3();
    void thread_tmp_6_fu_488_p2();
    void thread_tmp_7_dup_fu_419_p2();
    void thread_tmp_7_fu_494_p1();
    void thread_tmp_8_fu_291_p2();
    void thread_tmp_8_mid1_fu_436_p2();
    void thread_tmp_9_mid223_v_fu_374_p3();
    void thread_tmp_9_mid2_fu_450_p1();
    void thread_tmp_9_mid2_fu_450_p2();
    void thread_tmp_9_mid2_v_fu_442_p3();
    void thread_tmp_fu_200_p0();
    void thread_tmp_fu_200_p2();
    void thread_tmp_mid_fu_390_p3();
    void thread_tmp_s_fu_301_p1();
    void thread_tmp_s_fu_301_p2();
    void thread_weight_buffer_address0();
    void thread_weight_buffer_ce0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
