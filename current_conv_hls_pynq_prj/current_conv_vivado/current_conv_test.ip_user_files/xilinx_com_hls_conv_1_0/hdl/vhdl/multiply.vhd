-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    feature_buffer_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    feature_buffer_ce0 : OUT STD_LOGIC;
    feature_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_buffer_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weight_buffer_ce0 : OUT STD_LOGIC;
    weight_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    chin : IN STD_LOGIC_VECTOR (31 downto 0);
    kx : IN STD_LOGIC_VECTOR (31 downto 0);
    ky : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of multiply is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten1_reg_88 : STD_LOGIC_VECTOR (95 downto 0);
    signal index_reg_99 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_110 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_reg_121 : STD_LOGIC_VECTOR (63 downto 0);
    signal index_1_reg_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_143 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum_2_reg_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_2_reg_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_177 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_553 : STD_LOGIC_VECTOR (0 downto 0);
    signal smax_cast_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax_cast_reg_558 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_563 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_258_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_568 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound4_fu_272_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound4_reg_573 : STD_LOGIC_VECTOR (95 downto 0);
    signal exitcond_flatten1_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_578 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next1_fu_311_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal index_mid2_fu_397_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_mid2_fu_405_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_1_mid2_fu_467_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_mid2_fu_475_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_fu_499_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_519_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_next_fu_533_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_4_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_200_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_206_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_206_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax_fu_210_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_fu_222_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_228_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_228_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax1_fu_232_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_244_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_244_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal cast_fu_250_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cast1_fu_254_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_258_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound4_fu_272_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound4_fu_272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_282_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_282_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_mid1_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_s_fu_317_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond_flatten_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_s_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_mid1_fu_361_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_mid1_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_mid1_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_mid_fu_345_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_1_mid_fu_337_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_413_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_mid_fu_390_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_2_mid_fu_353_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_dup_fu_419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_mid2_fu_366_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_mid223_v_fu_374_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_mid1_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_mid2_v_fu_442_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_mid2_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_mid_fu_382_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_cast_mid2_fu_455_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_2_mid2_fu_428_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_mid2_cast_fu_463_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_mid2_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_op_fu_505_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_mid213_op_fu_511_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_op_fu_527_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound4_fu_272_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound4_fu_272_p10 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound_fu_258_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_258_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_244_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_244_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_282_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_mid1_fu_361_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_fadd_32ns_32bkb_U18 : component conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => sum_2_reg_154,
        din1 => tmp_9_fu_193_p2,
        dout => sum_fu_188_p2);

    conv_fmul_32ns_32cud_U19 : component conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => feature_buffer_q0,
        din1 => weight_buffer_q0,
        dout => tmp_9_fu_193_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_306_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_reg_110 <= c_mid2_fu_405_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_reg_110 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_306_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_143 <= i_mid2_fu_475_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_143 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    index_1_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_306_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                index_1_reg_132 <= index_1_mid2_fu_467_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                index_1_reg_132 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    index_2_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_306_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                index_2_reg_166 <= tmp_10_fu_499_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                index_2_reg_166 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    index_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_306_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                index_reg_99 <= index_mid2_fu_397_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                index_reg_99 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_306_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten1_reg_88 <= indvar_flatten_next1_fu_311_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten1_reg_88 <= ap_const_lv96_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_306_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_121 <= indvar_flatten_next_fu_533_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_121 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_306_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_177 <= j_1_fu_519_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_177 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    sum_2_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_578 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                sum_2_reg_154 <= sum_fu_188_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_2_reg_154 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound4_reg_573 <= bound4_fu_272_p2;
                bound_reg_568 <= bound_fu_258_p2;
                    smax_cast_reg_558(30 downto 0) <= smax_cast_fu_218_p1(30 downto 0);
                tmp_2_reg_563 <= tmp_2_fu_244_p2;
                tmp_reg_553 <= tmp_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten1_reg_578 <= exitcond_flatten1_fu_306_p2;
            end if;
        end if;
    end process;
    smax_cast_reg_558(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten1_fu_306_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((exitcond_flatten1_fu_306_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((exitcond_flatten1_fu_306_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten1_fu_306_p2)
    begin
        if ((exitcond_flatten1_fu_306_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= sum_2_reg_154;
    bound4_fu_272_p0 <= bound4_fu_272_p00(64 - 1 downto 0);
    bound4_fu_272_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_258_p2),96));
    bound4_fu_272_p1 <= bound4_fu_272_p10(32 - 1 downto 0);
    bound4_fu_272_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(chin),96));
    bound4_fu_272_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound4_fu_272_p0) * unsigned(bound4_fu_272_p1), 96));
    bound_fu_258_p0 <= bound_fu_258_p00(32 - 1 downto 0);
    bound_fu_258_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cast1_fu_254_p0),64));
    bound_fu_258_p1 <= bound_fu_258_p10(32 - 1 downto 0);
    bound_fu_258_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cast_fu_250_p0),64));
    bound_fu_258_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_258_p0) * unsigned(bound_fu_258_p1), 64));
    c_mid2_fu_405_p3 <= 
        c_s_fu_317_p2 when (exitcond_flatten_fu_332_p2(0) = '1') else 
        c_reg_110;
    c_s_fu_317_p2 <= std_logic_vector(unsigned(c_reg_110) + unsigned(ap_const_lv31_1));
    cast1_fu_254_p0 <= kx;
    cast_fu_250_p0 <= ky;
    exitcond_flatten1_fu_306_p2 <= "1" when (indvar_flatten1_reg_88 = bound4_reg_573) else "0";
    exitcond_flatten_fu_332_p2 <= "1" when (indvar_flatten_reg_121 = bound_reg_568) else "0";
    feature_buffer_address0 <= tmp_4_fu_483_p1(10 - 1 downto 0);

    feature_buffer_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            feature_buffer_ce0 <= ap_const_logic_1;
        else 
            feature_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_413_p2 <= std_logic_vector(unsigned(i_mid_fu_345_p3) + unsigned(ap_const_lv31_1));
    i_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_413_p2),32));
    i_cast_mid1_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_143),32));
    i_mid2_fu_475_p3 <= 
        i_mid_fu_345_p3 when (tmp_mid_fu_390_p3(0) = '1') else 
        i_1_fu_413_p2;
    i_mid_fu_345_p3 <= 
        ap_const_lv31_0 when (exitcond_flatten_fu_332_p2(0) = '1') else 
        i_reg_143;
    index_1_mid2_fu_467_p3 <= 
        index_1_mid_fu_337_p3 when (tmp_mid_fu_390_p3(0) = '1') else 
        tmp_7_dup_fu_419_p2;
    index_1_mid_fu_337_p3 <= 
        index_s_fu_327_p2 when (exitcond_flatten_fu_332_p2(0) = '1') else 
        index_1_reg_132;
    index_2_mid2_fu_428_p3 <= 
        index_2_mid_fu_353_p3 when (tmp_mid_fu_390_p3(0) = '1') else 
        tmp_7_dup_fu_419_p2;
    index_2_mid_fu_353_p3 <= 
        index_s_fu_327_p2 when (exitcond_flatten_fu_332_p2(0) = '1') else 
        index_2_reg_166;
    index_mid2_fu_397_p3 <= 
        index_s_fu_327_p2 when (exitcond_flatten_fu_332_p2(0) = '1') else 
        index_reg_99;
    index_s_fu_327_p2 <= std_logic_vector(unsigned(tmp_2_reg_563) + unsigned(index_reg_99));
    indvar_flatten_next1_fu_311_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_88) + unsigned(ap_const_lv96_1));
    indvar_flatten_next_fu_533_p3 <= 
        ap_const_lv64_1 when (exitcond_flatten_fu_332_p2(0) = '1') else 
        indvar_flatten_op_fu_527_p2;
    indvar_flatten_op_fu_527_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_121) + unsigned(ap_const_lv64_1));
    j_1_fu_519_p3 <= 
        j_mid213_op_fu_511_p3 when (tmp_mid_fu_390_p3(0) = '1') else 
        ap_const_lv31_1;
    j_cast_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_177),32));
    j_cast_mid2_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_cast_mid2_fu_455_p3),32));
    j_cast_mid2_fu_455_p3 <= 
        j_cast_mid_fu_382_p3 when (tmp_mid_fu_390_p3(0) = '1') else 
        ap_const_lv31_0;
    j_cast_mid_fu_382_p3 <= 
        ap_const_lv31_0 when (exitcond_flatten_fu_332_p2(0) = '1') else 
        j_reg_177;
    j_mid213_op_fu_511_p3 <= 
        ap_const_lv31_1 when (exitcond_flatten_fu_332_p2(0) = '1') else 
        j_op_fu_505_p2;
    j_op_fu_505_p2 <= std_logic_vector(unsigned(j_reg_177) + unsigned(ap_const_lv31_1));
    smax1_fu_232_p3 <= 
        tmp_12_fu_228_p1 when (tmp_1_fu_222_p2(0) = '1') else 
        ap_const_lv31_0;
    smax_cast_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smax_fu_210_p3),32));
    smax_fu_210_p3 <= 
        tmp_11_fu_206_p1 when (tmp_fu_200_p2(0) = '1') else 
        ap_const_lv31_0;
    tmp_10_fu_499_p2 <= std_logic_vector(signed(index_2_mid2_fu_428_p3) + signed(ap_const_lv32_1));
    tmp_11_fu_206_p0 <= kx;
    tmp_11_fu_206_p1 <= tmp_11_fu_206_p0(31 - 1 downto 0);
    tmp_12_fu_228_p0 <= ky;
    tmp_12_fu_228_p1 <= tmp_12_fu_228_p0(31 - 1 downto 0);
    tmp_1_fu_222_p0 <= ky;
    tmp_1_fu_222_p2 <= "1" when (signed(tmp_1_fu_222_p0) > signed(ap_const_lv32_0)) else "0";
    tmp_2_fu_244_p0 <= tmp_2_fu_244_p00(31 - 1 downto 0);
    tmp_2_fu_244_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smax1_fu_232_p3),32));
    tmp_2_fu_244_p1 <= tmp_2_fu_244_p10(31 - 1 downto 0);
    tmp_2_fu_244_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smax_fu_210_p3),32));
    tmp_2_fu_244_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_244_p0) * unsigned(tmp_2_fu_244_p1), 32));
        tmp_4_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_2_mid2_fu_428_p3),64));

    tmp_5_fu_282_p0 <= ky;
    tmp_5_fu_282_p1 <= tmp_5_fu_282_p10(31 - 1 downto 0);
    tmp_5_fu_282_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_110),32));
    tmp_5_fu_282_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_5_fu_282_p0) * signed('0' &tmp_5_fu_282_p1))), 32));
    tmp_5_mid1_fu_361_p0 <= tmp_5_mid1_fu_361_p00(31 - 1 downto 0);
    tmp_5_mid1_fu_361_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_s_fu_317_p2),32));
    tmp_5_mid1_fu_361_p1 <= ky;
    tmp_5_mid1_fu_361_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp_5_mid1_fu_361_p0) * signed(tmp_5_mid1_fu_361_p1))), 32));
    tmp_5_mid2_fu_366_p3 <= 
        tmp_5_mid1_fu_361_p2 when (exitcond_flatten_fu_332_p2(0) = '1') else 
        tmp_5_fu_282_p2;
    tmp_6_fu_488_p2 <= std_logic_vector(unsigned(j_cast_mid2_cast_fu_463_p1) + unsigned(tmp_9_mid2_fu_450_p2));
    tmp_7_dup_fu_419_p2 <= std_logic_vector(unsigned(smax_cast_reg_558) + unsigned(index_1_mid_fu_337_p3));
        tmp_7_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_488_p2),64));

    tmp_8_fu_291_p2 <= std_logic_vector(unsigned(tmp_5_fu_282_p2) + unsigned(i_cast_mid1_fu_287_p1));
    tmp_8_mid1_fu_436_p2 <= std_logic_vector(unsigned(i_cast_fu_424_p1) + unsigned(tmp_5_mid2_fu_366_p3));
    tmp_9_mid223_v_fu_374_p3 <= 
        tmp_5_mid1_fu_361_p2 when (exitcond_flatten_fu_332_p2(0) = '1') else 
        tmp_8_fu_291_p2;
    tmp_9_mid2_fu_450_p1 <= kx;
    tmp_9_mid2_fu_450_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_9_mid2_v_fu_442_p3) * signed(tmp_9_mid2_fu_450_p1))), 32));
    tmp_9_mid2_v_fu_442_p3 <= 
        tmp_9_mid223_v_fu_374_p3 when (tmp_mid_fu_390_p3(0) = '1') else 
        tmp_8_mid1_fu_436_p2;
    tmp_fu_200_p0 <= kx;
    tmp_fu_200_p2 <= "1" when (signed(tmp_fu_200_p0) > signed(ap_const_lv32_0)) else "0";
    tmp_mid_fu_390_p3 <= 
        tmp_reg_553 when (exitcond_flatten_fu_332_p2(0) = '1') else 
        tmp_s_fu_301_p2;
    tmp_s_fu_301_p1 <= kx;
    tmp_s_fu_301_p2 <= "1" when (signed(j_cast_fu_297_p1) < signed(tmp_s_fu_301_p1)) else "0";
    weight_buffer_address0 <= tmp_7_fu_494_p1(4 - 1 downto 0);

    weight_buffer_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weight_buffer_ce0 <= ap_const_logic_1;
        else 
            weight_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
