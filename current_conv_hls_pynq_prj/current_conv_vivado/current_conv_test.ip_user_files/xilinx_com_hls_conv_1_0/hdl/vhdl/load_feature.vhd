-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_feature is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_feature_in_AWVALID : OUT STD_LOGIC;
    m_axi_feature_in_AWREADY : IN STD_LOGIC;
    m_axi_feature_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_feature_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_feature_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_feature_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_feature_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_feature_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_feature_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_feature_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_feature_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_feature_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_feature_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_feature_in_WVALID : OUT STD_LOGIC;
    m_axi_feature_in_WREADY : IN STD_LOGIC;
    m_axi_feature_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_feature_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_feature_in_WLAST : OUT STD_LOGIC;
    m_axi_feature_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_feature_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_feature_in_ARVALID : OUT STD_LOGIC;
    m_axi_feature_in_ARREADY : IN STD_LOGIC;
    m_axi_feature_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_feature_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_feature_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_feature_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_feature_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_feature_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_feature_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_feature_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_feature_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_feature_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_feature_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_feature_in_RVALID : IN STD_LOGIC;
    m_axi_feature_in_RREADY : OUT STD_LOGIC;
    m_axi_feature_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_feature_in_RLAST : IN STD_LOGIC;
    m_axi_feature_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_feature_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_feature_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_feature_in_BVALID : IN STD_LOGIC;
    m_axi_feature_in_BREADY : OUT STD_LOGIC;
    m_axi_feature_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_feature_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_feature_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    feature_in_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    feature_buffer_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    feature_buffer_ce0 : OUT STD_LOGIC;
    feature_buffer_we0 : OUT STD_LOGIC;
    feature_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    chin : IN STD_LOGIC_VECTOR (31 downto 0);
    kx : IN STD_LOGIC_VECTOR (31 downto 0);
    ky : IN STD_LOGIC_VECTOR (31 downto 0);
    win : IN STD_LOGIC_VECTOR (31 downto 0);
    hin : IN STD_LOGIC_VECTOR (31 downto 0);
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    y : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of load_feature is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal feature_in_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_cond4_reg_853 : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_in_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal or_cond4_reg_853_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten2_reg_160 : STD_LOGIC_VECTOR (95 downto 0);
    signal index_reg_171 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_182 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_reg_193 : STD_LOGIC_VECTOR (63 downto 0);
    signal index_1_reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_215 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_2_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_237 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_s_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal smax_cast_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax_cast_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_306_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_798 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound4_fu_320_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound4_reg_803 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp2_mid_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_mid_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_cast_fu_352_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_cast_reg_813 : STD_LOGIC_VECTOR (32 downto 0);
    signal exitcond_flatten2_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_feature_in_ARREADY : STD_LOGIC;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next2_fu_419_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal index_mid2_fu_517_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_mid2_fu_525_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_2_mid2_fu_548_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_2_mid2_reg_837 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_2_mid2_reg_837_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal index_2_mid2_reg_837_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal index_2_mid2_reg_837_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal index_2_mid2_reg_837_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal index_2_mid2_reg_837_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal index_2_mid2_reg_837_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal index_2_mid2_reg_837_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal index_2_mid2_reg_837_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal index_1_mid2_fu_625_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_mid2_fu_633_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_cond4_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_reg_853_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_reg_853_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_reg_853_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_reg_853_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_reg_853_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_reg_853_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_reg_853_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_in_addr_reg_857 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_722_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_next_fu_736_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_in_addr_read_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal tmp_25_fu_744_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_feature_in_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_16_fu_254_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax_fu_258_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_13_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_276_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax1_fu_280_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_14_fu_292_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_14_fu_292_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal bound_fu_306_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound4_fu_320_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound4_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_326_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_mid_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_mid_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_360_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_360_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_cast_mid1_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal yi_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_374_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_fu_405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_s_fu_425_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond_flatten_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_s_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_mid1_fu_469_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_18_mid1_fu_469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_mid1_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_fu_482_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_mid_fu_453_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal index_1_mid_fu_445_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_533_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_23_mid_fu_510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_2_mid_fu_461_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_dup_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal yi_mid1_fu_556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_561_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_mid1_fu_575_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_mid2_fu_474_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_mid227_v_fu_487_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid1_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_mid2_v_fu_586_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_mid2_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_mid1_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev2_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_mid3_fu_495_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_mid1_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_mid_fu_502_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_cast_mid2_fu_613_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_cast_mid2_cast_fu_621_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xi_fu_641_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_646_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_660_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev3_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_mid2_fu_605_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_mid2_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_cast_fu_683_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum_fu_687_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal j_op_fu_708_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_mid211_op_fu_714_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_op_fu_730_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound4_fu_320_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound4_fu_320_p10 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound_fu_306_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_306_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_292_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_292_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_360_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_mid1_fu_469_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_703 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_feature_in_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_feature_in_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_703)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_feature_in_ARREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_axi_feature_in_ARREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_feature_in_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    c_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c_reg_182 <= c_mid2_fu_525_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_reg_182 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_215 <= i_mid2_fu_633_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_215 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    index_1_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                index_1_reg_204 <= index_1_mid2_fu_625_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                index_1_reg_204 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    index_2_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                index_2_reg_226 <= tmp_26_fu_702_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                index_2_reg_226 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    index_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                index_reg_171 <= index_mid2_fu_517_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                index_reg_171 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten2_reg_160 <= indvar_flatten_next2_fu_419_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten2_reg_160 <= ap_const_lv96_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_193 <= indvar_flatten_next_fu_736_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_193 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_reg_237 <= j_2_fu_722_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_237 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound4_reg_803 <= bound4_fu_320_p2;
                bound_reg_798 <= bound_fu_306_p2;
                    sext_cast_reg_813(29 downto 0) <= sext_cast_fu_352_p1(29 downto 0);
                    smax_cast_reg_788(30 downto 0) <= smax_cast_fu_266_p1(30 downto 0);
                tmp2_mid_reg_808 <= tmp2_mid_fu_346_p2;
                tmp_14_reg_793 <= tmp_14_fu_292_p2;
                tmp_s_reg_783 <= tmp_s_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond4_reg_853_pp0_iter7_reg = ap_const_lv1_1))) then
                feature_in_addr_read_reg_878 <= m_axi_feature_in_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond4_fu_671_p2 = ap_const_lv1_1))) then
                feature_in_addr_reg_857 <= sum_cast_fu_692_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten2_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                index_2_mid2_reg_837 <= index_2_mid2_fu_548_p3;
                or_cond4_reg_853 <= or_cond4_fu_671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                index_2_mid2_reg_837_pp0_iter1_reg <= index_2_mid2_reg_837;
                or_cond4_reg_853_pp0_iter1_reg <= or_cond4_reg_853;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                index_2_mid2_reg_837_pp0_iter2_reg <= index_2_mid2_reg_837_pp0_iter1_reg;
                index_2_mid2_reg_837_pp0_iter3_reg <= index_2_mid2_reg_837_pp0_iter2_reg;
                index_2_mid2_reg_837_pp0_iter4_reg <= index_2_mid2_reg_837_pp0_iter3_reg;
                index_2_mid2_reg_837_pp0_iter5_reg <= index_2_mid2_reg_837_pp0_iter4_reg;
                index_2_mid2_reg_837_pp0_iter6_reg <= index_2_mid2_reg_837_pp0_iter5_reg;
                index_2_mid2_reg_837_pp0_iter7_reg <= index_2_mid2_reg_837_pp0_iter6_reg;
                index_2_mid2_reg_837_pp0_iter8_reg <= index_2_mid2_reg_837_pp0_iter7_reg;
                or_cond4_reg_853_pp0_iter2_reg <= or_cond4_reg_853_pp0_iter1_reg;
                or_cond4_reg_853_pp0_iter3_reg <= or_cond4_reg_853_pp0_iter2_reg;
                or_cond4_reg_853_pp0_iter4_reg <= or_cond4_reg_853_pp0_iter3_reg;
                or_cond4_reg_853_pp0_iter5_reg <= or_cond4_reg_853_pp0_iter4_reg;
                or_cond4_reg_853_pp0_iter6_reg <= or_cond4_reg_853_pp0_iter5_reg;
                or_cond4_reg_853_pp0_iter7_reg <= or_cond4_reg_853_pp0_iter6_reg;
                or_cond4_reg_853_pp0_iter8_reg <= or_cond4_reg_853_pp0_iter7_reg;
            end if;
        end if;
    end process;
    smax_cast_reg_788(31) <= '0';
    sext_cast_reg_813(32 downto 30) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, exitcond_flatten2_fu_414_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten2_fu_414_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten2_fu_414_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_feature_in_RVALID, ap_enable_reg_pp0_iter8, or_cond4_reg_853_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((m_axi_feature_in_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (or_cond4_reg_853_pp0_iter7_reg = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_feature_in_RVALID, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, or_cond4_reg_853_pp0_iter7_reg, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_feature_in_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (or_cond4_reg_853_pp0_iter7_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_feature_in_RVALID, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, or_cond4_reg_853_pp0_iter7_reg, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_feature_in_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (or_cond4_reg_853_pp0_iter7_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_state10_pp0_stage0_iter8_assign_proc : process(m_axi_feature_in_RVALID, or_cond4_reg_853_pp0_iter7_reg)
    begin
                ap_block_state10_pp0_stage0_iter8 <= ((m_axi_feature_in_RVALID = ap_const_logic_0) and (or_cond4_reg_853_pp0_iter7_reg = ap_const_lv1_1));
    end process;

        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(or_cond4_reg_853, ap_sig_ioackin_m_axi_feature_in_ARREADY)
    begin
                ap_block_state3_io <= ((ap_sig_ioackin_m_axi_feature_in_ARREADY = ap_const_logic_0) and (or_cond4_reg_853 = ap_const_lv1_1));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_703_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_cond4_reg_853)
    begin
                ap_condition_703 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond4_reg_853 = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten2_fu_414_p2)
    begin
        if ((exitcond_flatten2_fu_414_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_feature_in_ARREADY_assign_proc : process(m_axi_feature_in_ARREADY, ap_reg_ioackin_m_axi_feature_in_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_feature_in_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_feature_in_ARREADY <= m_axi_feature_in_ARREADY;
        else 
            ap_sig_ioackin_m_axi_feature_in_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    bound4_fu_320_p0 <= bound4_fu_320_p00(32 - 1 downto 0);
    bound4_fu_320_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(chin),96));
    bound4_fu_320_p1 <= bound4_fu_320_p10(64 - 1 downto 0);
    bound4_fu_320_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_306_p2),96));
    bound4_fu_320_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound4_fu_320_p0) * unsigned(bound4_fu_320_p1), 96));
    bound_fu_306_p0 <= bound_fu_306_p00(32 - 1 downto 0);
    bound_fu_306_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ky),64));
    bound_fu_306_p1 <= bound_fu_306_p10(32 - 1 downto 0);
    bound_fu_306_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kx),64));
    bound_fu_306_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_306_p0) * unsigned(bound_fu_306_p1), 64));
    c_mid2_fu_525_p3 <= 
        c_s_fu_425_p2 when (exitcond_flatten_fu_440_p2(0) = '1') else 
        c_reg_182;
    c_s_fu_425_p2 <= std_logic_vector(unsigned(c_reg_182) + unsigned(ap_const_lv31_1));
    exitcond_flatten2_fu_414_p2 <= "1" when (indvar_flatten2_reg_160 = bound4_reg_803) else "0";
    exitcond_flatten_fu_440_p2 <= "1" when (indvar_flatten_reg_193 = bound_reg_798) else "0";

    feature_buffer_address0_assign_proc : process(ap_block_pp0_stage0, or_cond4_reg_853_pp0_iter8_reg, ap_enable_reg_pp0_iter9, tmp_25_fu_744_p1, tmp_24_fu_748_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((or_cond4_reg_853_pp0_iter8_reg = ap_const_lv1_1)) then 
                feature_buffer_address0 <= tmp_24_fu_748_p1(10 - 1 downto 0);
            elsif ((or_cond4_reg_853_pp0_iter8_reg = ap_const_lv1_0)) then 
                feature_buffer_address0 <= tmp_25_fu_744_p1(10 - 1 downto 0);
            else 
                feature_buffer_address0 <= "XXXXXXXXXX";
            end if;
        else 
            feature_buffer_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    feature_buffer_ce0_assign_proc : process(ap_block_pp0_stage0_11001, or_cond4_reg_853_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if ((((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond4_reg_853_pp0_iter8_reg = ap_const_lv1_1)) or ((or_cond4_reg_853_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            feature_buffer_ce0 <= ap_const_logic_1;
        else 
            feature_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    feature_buffer_d0_assign_proc : process(ap_block_pp0_stage0, or_cond4_reg_853_pp0_iter8_reg, feature_in_addr_read_reg_878, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((or_cond4_reg_853_pp0_iter8_reg = ap_const_lv1_1)) then 
                feature_buffer_d0 <= feature_in_addr_read_reg_878;
            elsif ((or_cond4_reg_853_pp0_iter8_reg = ap_const_lv1_0)) then 
                feature_buffer_d0 <= ap_const_lv32_0;
            else 
                feature_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            feature_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    feature_buffer_we0_assign_proc : process(ap_block_pp0_stage0_11001, or_cond4_reg_853_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if ((((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond4_reg_853_pp0_iter8_reg = ap_const_lv1_1)) or ((or_cond4_reg_853_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            feature_buffer_we0 <= ap_const_logic_1;
        else 
            feature_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    feature_in_blk_n_AR_assign_proc : process(m_axi_feature_in_ARREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, or_cond4_reg_853)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond4_reg_853 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            feature_in_blk_n_AR <= m_axi_feature_in_ARREADY;
        else 
            feature_in_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    feature_in_blk_n_R_assign_proc : process(m_axi_feature_in_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, or_cond4_reg_853_pp0_iter7_reg)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (or_cond4_reg_853_pp0_iter7_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            feature_in_blk_n_R <= m_axi_feature_in_RVALID;
        else 
            feature_in_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    i_2_fu_533_p2 <= std_logic_vector(unsigned(i_mid_fu_453_p3) + unsigned(ap_const_lv31_1));
    i_cast_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_533_p2),32));
    i_cast_mid1_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_215),32));
    i_mid2_fu_633_p3 <= 
        i_mid_fu_453_p3 when (tmp_23_mid_fu_510_p3(0) = '1') else 
        i_2_fu_533_p2;
    i_mid_fu_453_p3 <= 
        ap_const_lv31_0 when (exitcond_flatten_fu_440_p2(0) = '1') else 
        i_reg_215;
    index_1_mid2_fu_625_p3 <= 
        index_1_mid_fu_445_p3 when (tmp_23_mid_fu_510_p3(0) = '1') else 
        tmp_20_dup_fu_539_p2;
    index_1_mid_fu_445_p3 <= 
        index_s_fu_435_p2 when (exitcond_flatten_fu_440_p2(0) = '1') else 
        index_1_reg_204;
    index_2_mid2_fu_548_p3 <= 
        index_2_mid_fu_461_p3 when (tmp_23_mid_fu_510_p3(0) = '1') else 
        tmp_20_dup_fu_539_p2;
    index_2_mid_fu_461_p3 <= 
        index_s_fu_435_p2 when (exitcond_flatten_fu_440_p2(0) = '1') else 
        index_2_reg_226;
    index_mid2_fu_517_p3 <= 
        index_s_fu_435_p2 when (exitcond_flatten_fu_440_p2(0) = '1') else 
        index_reg_171;
    index_s_fu_435_p2 <= std_logic_vector(unsigned(tmp_14_reg_793) + unsigned(index_reg_171));
    indvar_flatten_next2_fu_419_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_160) + unsigned(ap_const_lv96_1));
    indvar_flatten_next_fu_736_p3 <= 
        ap_const_lv64_1 when (exitcond_flatten_fu_440_p2(0) = '1') else 
        indvar_flatten_op_fu_730_p2;
    indvar_flatten_op_fu_730_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_193) + unsigned(ap_const_lv64_1));
    j_2_fu_722_p3 <= 
        j_mid211_op_fu_714_p3 when (tmp_23_mid_fu_510_p3(0) = '1') else 
        ap_const_lv31_1;
    j_cast_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_237),32));
    j_cast_mid2_cast_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_cast_mid2_fu_613_p3),32));
    j_cast_mid2_fu_613_p3 <= 
        j_cast_mid_fu_502_p3 when (tmp_23_mid_fu_510_p3(0) = '1') else 
        ap_const_lv31_0;
    j_cast_mid_fu_502_p3 <= 
        ap_const_lv31_0 when (exitcond_flatten_fu_440_p2(0) = '1') else 
        j_reg_237;
    j_mid211_op_fu_714_p3 <= 
        ap_const_lv31_1 when (exitcond_flatten_fu_440_p2(0) = '1') else 
        j_op_fu_708_p2;
    j_op_fu_708_p2 <= std_logic_vector(unsigned(j_reg_237) + unsigned(ap_const_lv31_1));
    m_axi_feature_in_ARADDR <= feature_in_addr_reg_857;
    m_axi_feature_in_ARBURST <= ap_const_lv2_0;
    m_axi_feature_in_ARCACHE <= ap_const_lv4_0;
    m_axi_feature_in_ARID <= ap_const_lv1_0;
    m_axi_feature_in_ARLEN <= ap_const_lv32_1;
    m_axi_feature_in_ARLOCK <= ap_const_lv2_0;
    m_axi_feature_in_ARPROT <= ap_const_lv3_0;
    m_axi_feature_in_ARQOS <= ap_const_lv4_0;
    m_axi_feature_in_ARREGION <= ap_const_lv4_0;
    m_axi_feature_in_ARSIZE <= ap_const_lv3_0;
    m_axi_feature_in_ARUSER <= ap_const_lv1_0;

    m_axi_feature_in_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_cond4_reg_853, ap_reg_ioackin_m_axi_feature_in_ARREADY, ap_block_pp0_stage0_01001)
    begin
        if (((ap_reg_ioackin_m_axi_feature_in_ARREADY = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond4_reg_853 = ap_const_lv1_1))) then 
            m_axi_feature_in_ARVALID <= ap_const_logic_1;
        else 
            m_axi_feature_in_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_feature_in_AWADDR <= ap_const_lv32_0;
    m_axi_feature_in_AWBURST <= ap_const_lv2_0;
    m_axi_feature_in_AWCACHE <= ap_const_lv4_0;
    m_axi_feature_in_AWID <= ap_const_lv1_0;
    m_axi_feature_in_AWLEN <= ap_const_lv32_0;
    m_axi_feature_in_AWLOCK <= ap_const_lv2_0;
    m_axi_feature_in_AWPROT <= ap_const_lv3_0;
    m_axi_feature_in_AWQOS <= ap_const_lv4_0;
    m_axi_feature_in_AWREGION <= ap_const_lv4_0;
    m_axi_feature_in_AWSIZE <= ap_const_lv3_0;
    m_axi_feature_in_AWUSER <= ap_const_lv1_0;
    m_axi_feature_in_AWVALID <= ap_const_logic_0;
    m_axi_feature_in_BREADY <= ap_const_logic_0;

    m_axi_feature_in_RREADY_assign_proc : process(ap_enable_reg_pp0_iter8, or_cond4_reg_853_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond4_reg_853_pp0_iter7_reg = ap_const_lv1_1))) then 
            m_axi_feature_in_RREADY <= ap_const_logic_1;
        else 
            m_axi_feature_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_feature_in_WDATA <= ap_const_lv32_0;
    m_axi_feature_in_WID <= ap_const_lv1_0;
    m_axi_feature_in_WLAST <= ap_const_logic_0;
    m_axi_feature_in_WSTRB <= ap_const_lv4_0;
    m_axi_feature_in_WUSER <= ap_const_lv1_0;
    m_axi_feature_in_WVALID <= ap_const_logic_0;
    or_cond4_fu_671_p2 <= (tmp2_mid2_fu_605_p3 and tmp1_fu_665_p2);
    rev1_fu_382_p2 <= (tmp_27_fu_374_p3 xor ap_const_lv1_1);
    rev2_fu_569_p2 <= (tmp_28_fu_561_p3 xor ap_const_lv1_1);
    rev3_fu_654_p2 <= (tmp_29_fu_646_p3 xor ap_const_lv1_1);
    rev_fu_334_p2 <= (tmp_23_fu_326_p3 xor ap_const_lv1_1);
    sext_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(feature_in_offset),33));
    smax1_fu_280_p3 <= 
        tmp_20_fu_276_p1 when (tmp_13_fu_270_p2(0) = '1') else 
        ap_const_lv31_0;
    smax_cast_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smax_fu_258_p3),32));
    smax_fu_258_p3 <= 
        tmp_16_fu_254_p1 when (tmp_s_fu_248_p2(0) = '1') else 
        ap_const_lv31_0;
        sum_cast_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_fu_687_p2),64));

    sum_fu_687_p2 <= std_logic_vector(unsigned(sext_cast_reg_813) + unsigned(tmp_23_cast_fu_683_p1));
    tmp1_fu_665_p2 <= (tmp_21_fu_660_p2 and rev3_fu_654_p2);
    tmp2_fu_399_p2 <= (tmp_17_fu_388_p2 and rev1_fu_382_p2);
    tmp2_mid1_fu_599_p2 <= (tmp_22_mid1_fu_575_p2 and rev2_fu_569_p2);
    tmp2_mid2_fu_605_p3 <= 
        tmp2_mid3_fu_495_p3 when (tmp_23_mid_fu_510_p3(0) = '1') else 
        tmp2_mid1_fu_599_p2;
    tmp2_mid3_fu_495_p3 <= 
        tmp2_mid_reg_808 when (exitcond_flatten_fu_440_p2(0) = '1') else 
        tmp2_fu_399_p2;
    tmp2_mid_fu_346_p2 <= (tmp_22_mid_fu_340_p2 and rev_fu_334_p2);
    tmp5_mid227_v_fu_487_p3 <= 
        tmp_mid_fu_482_p2 when (exitcond_flatten_fu_440_p2(0) = '1') else 
        tmp_fu_393_p2;
    tmp5_mid2_fu_594_p1 <= win;
    tmp5_mid2_fu_594_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp5_mid2_v_fu_586_p3) * signed(tmp5_mid2_fu_594_p1))), 32));
    tmp5_mid2_v_fu_586_p3 <= 
        tmp5_mid227_v_fu_487_p3 when (tmp_23_mid_fu_510_p3(0) = '1') else 
        tmp_mid1_fu_580_p2;
    tmp_13_fu_270_p2 <= "1" when (signed(ky) > signed(ap_const_lv32_0)) else "0";
    tmp_14_fu_292_p0 <= tmp_14_fu_292_p00(31 - 1 downto 0);
    tmp_14_fu_292_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smax_fu_258_p3),32));
    tmp_14_fu_292_p1 <= tmp_14_fu_292_p10(31 - 1 downto 0);
    tmp_14_fu_292_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(smax1_fu_280_p3),32));
    tmp_14_fu_292_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_292_p0) * unsigned(tmp_14_fu_292_p1), 32));
    tmp_15_fu_360_p0 <= hin;
    tmp_15_fu_360_p1 <= tmp_15_fu_360_p10(31 - 1 downto 0);
    tmp_15_fu_360_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_182),32));
    tmp_15_fu_360_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_15_fu_360_p0) * signed('0' &tmp_15_fu_360_p1))), 32));
    tmp_16_fu_254_p1 <= kx(31 - 1 downto 0);
    tmp_17_fu_388_p1 <= hin;
    tmp_17_fu_388_p2 <= "1" when (signed(yi_fu_369_p2) < signed(tmp_17_fu_388_p1)) else "0";
    tmp_18_fu_409_p2 <= "1" when (signed(j_cast_fu_405_p1) < signed(kx)) else "0";
    tmp_18_mid1_fu_469_p0 <= tmp_18_mid1_fu_469_p00(31 - 1 downto 0);
    tmp_18_mid1_fu_469_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_s_fu_425_p2),32));
    tmp_18_mid1_fu_469_p1 <= hin;
    tmp_18_mid1_fu_469_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp_18_mid1_fu_469_p0) * signed(tmp_18_mid1_fu_469_p1))), 32));
    tmp_18_mid2_fu_474_p3 <= 
        tmp_18_mid1_fu_469_p2 when (exitcond_flatten_fu_440_p2(0) = '1') else 
        tmp_15_fu_360_p2;
    tmp_20_dup_fu_539_p2 <= std_logic_vector(unsigned(smax_cast_reg_788) + unsigned(index_1_mid_fu_445_p3));
    tmp_20_fu_276_p1 <= ky(31 - 1 downto 0);
    tmp_21_fu_660_p1 <= win;
    tmp_21_fu_660_p2 <= "1" when (signed(xi_fu_641_p2) < signed(tmp_21_fu_660_p1)) else "0";
    tmp_22_fu_677_p2 <= std_logic_vector(unsigned(tmp5_mid2_fu_594_p2) + unsigned(xi_fu_641_p2));
    tmp_22_mid1_fu_575_p1 <= hin;
    tmp_22_mid1_fu_575_p2 <= "1" when (signed(yi_mid1_fu_556_p2) < signed(tmp_22_mid1_fu_575_p1)) else "0";
    tmp_22_mid_fu_340_p1 <= hin;
    tmp_22_mid_fu_340_p2 <= "1" when (signed(y) < signed(tmp_22_mid_fu_340_p1)) else "0";
        tmp_23_cast_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_fu_677_p2),33));

    tmp_23_fu_326_p3 <= y(31 downto 31);
    tmp_23_mid_fu_510_p3 <= 
        tmp_s_reg_783 when (exitcond_flatten_fu_440_p2(0) = '1') else 
        tmp_18_fu_409_p2;
        tmp_24_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_2_mid2_reg_837_pp0_iter8_reg),64));

        tmp_25_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_2_mid2_reg_837_pp0_iter8_reg),64));

    tmp_26_fu_702_p2 <= std_logic_vector(signed(index_2_mid2_fu_548_p3) + signed(ap_const_lv32_1));
    tmp_27_fu_374_p3 <= yi_fu_369_p2(31 downto 31);
    tmp_28_fu_561_p3 <= yi_mid1_fu_556_p2(31 downto 31);
    tmp_29_fu_646_p3 <= xi_fu_641_p2(31 downto 31);
    tmp_fu_393_p2 <= std_logic_vector(unsigned(tmp_15_fu_360_p2) + unsigned(yi_fu_369_p2));
    tmp_mid1_fu_580_p2 <= std_logic_vector(unsigned(yi_mid1_fu_556_p2) + unsigned(tmp_18_mid2_fu_474_p3));
    tmp_mid_fu_482_p2 <= std_logic_vector(unsigned(tmp_18_mid1_fu_469_p2) + unsigned(y));
    tmp_s_fu_248_p2 <= "1" when (signed(kx) > signed(ap_const_lv32_0)) else "0";
    xi_fu_641_p2 <= std_logic_vector(unsigned(j_cast_mid2_cast_fu_621_p1) + unsigned(x));
    yi_fu_369_p2 <= std_logic_vector(unsigned(y) + unsigned(i_cast_mid1_fu_365_p1));
    yi_mid1_fu_556_p2 <= std_logic_vector(unsigned(i_cast_fu_544_p1) + unsigned(y));
end behav;
