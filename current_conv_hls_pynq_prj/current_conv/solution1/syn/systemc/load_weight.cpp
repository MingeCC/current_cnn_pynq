// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "load_weight.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic load_weight::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic load_weight::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> load_weight::ap_ST_fsm_state1 = "1";
const sc_lv<10> load_weight::ap_ST_fsm_state2 = "10";
const sc_lv<10> load_weight::ap_ST_fsm_state3 = "100";
const sc_lv<10> load_weight::ap_ST_fsm_state4 = "1000";
const sc_lv<10> load_weight::ap_ST_fsm_state5 = "10000";
const sc_lv<10> load_weight::ap_ST_fsm_state6 = "100000";
const sc_lv<10> load_weight::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> load_weight::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> load_weight::ap_ST_fsm_pp0_stage0 = "100000000";
const sc_lv<10> load_weight::ap_ST_fsm_state12 = "1000000000";
const bool load_weight::ap_const_boolean_1 = true;
const sc_lv<32> load_weight::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> load_weight::ap_const_lv1_0 = "0";
const sc_lv<3> load_weight::ap_const_lv3_0 = "000";
const sc_lv<2> load_weight::ap_const_lv2_0 = "00";
const sc_lv<4> load_weight::ap_const_lv4_0 = "0000";
const sc_lv<32> load_weight::ap_const_lv32_1 = "1";
const sc_lv<32> load_weight::ap_const_lv32_8 = "1000";
const bool load_weight::ap_const_boolean_0 = false;
const sc_lv<1> load_weight::ap_const_lv1_1 = "1";
const sc_lv<32> load_weight::ap_const_lv32_7 = "111";
const sc_lv<31> load_weight::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<31> load_weight::ap_const_lv31_1 = "1";
const sc_lv<32> load_weight::ap_const_lv32_9 = "1001";

load_weight::load_weight(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( m_axi_weight_RVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_s_reg_192 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( m_axi_weight_RVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_s_reg_192 );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter1);
    sensitive << ( m_axi_weight_RVALID );
    sensitive << ( tmp_s_reg_192 );

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter0);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state9);
    sensitive << ( tmp_s_fu_164_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_phi_mux_c_phi_fu_116_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_s_reg_192 );
    sensitive << ( c_reg_112 );
    sensitive << ( c_1_reg_196 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_weight_ARREADY);
    sensitive << ( m_axi_weight_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_weight_ARREADY );

    SC_METHOD(thread_c_1_fu_169_p2);
    sensitive << ( ap_phi_mux_c_phi_fu_116_p4 );

    SC_METHOD(thread_c_cast_fu_160_p1);
    sensitive << ( ap_phi_mux_c_phi_fu_116_p4 );

    SC_METHOD(thread_m_axi_weight_ARADDR);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( weight_addr_reg_186 );
    sensitive << ( ap_reg_ioackin_m_axi_weight_ARREADY );

    SC_METHOD(thread_m_axi_weight_ARBURST);

    SC_METHOD(thread_m_axi_weight_ARCACHE);

    SC_METHOD(thread_m_axi_weight_ARID);

    SC_METHOD(thread_m_axi_weight_ARLEN);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( n_reg_180 );
    sensitive << ( ap_reg_ioackin_m_axi_weight_ARREADY );

    SC_METHOD(thread_m_axi_weight_ARLOCK);

    SC_METHOD(thread_m_axi_weight_ARPROT);

    SC_METHOD(thread_m_axi_weight_ARQOS);

    SC_METHOD(thread_m_axi_weight_ARREGION);

    SC_METHOD(thread_m_axi_weight_ARSIZE);

    SC_METHOD(thread_m_axi_weight_ARUSER);

    SC_METHOD(thread_m_axi_weight_ARVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_m_axi_weight_ARREADY );

    SC_METHOD(thread_m_axi_weight_AWADDR);

    SC_METHOD(thread_m_axi_weight_AWBURST);

    SC_METHOD(thread_m_axi_weight_AWCACHE);

    SC_METHOD(thread_m_axi_weight_AWID);

    SC_METHOD(thread_m_axi_weight_AWLEN);

    SC_METHOD(thread_m_axi_weight_AWLOCK);

    SC_METHOD(thread_m_axi_weight_AWPROT);

    SC_METHOD(thread_m_axi_weight_AWQOS);

    SC_METHOD(thread_m_axi_weight_AWREGION);

    SC_METHOD(thread_m_axi_weight_AWSIZE);

    SC_METHOD(thread_m_axi_weight_AWUSER);

    SC_METHOD(thread_m_axi_weight_AWVALID);

    SC_METHOD(thread_m_axi_weight_BREADY);

    SC_METHOD(thread_m_axi_weight_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_s_reg_192 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_weight_WDATA);

    SC_METHOD(thread_m_axi_weight_WID);

    SC_METHOD(thread_m_axi_weight_WLAST);

    SC_METHOD(thread_m_axi_weight_WSTRB);

    SC_METHOD(thread_m_axi_weight_WUSER);

    SC_METHOD(thread_m_axi_weight_WVALID);

    SC_METHOD(thread_n_fu_130_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( kx );

    SC_METHOD(thread_n_fu_130_p2);
    sensitive << ( n_fu_130_p0 );
    sensitive << ( tmp1_fu_124_p2 );

    SC_METHOD(thread_sext_cast_fu_140_p1);
    sensitive << ( weight_offset );

    SC_METHOD(thread_sum2_cast_fu_150_p1);
    sensitive << ( sum2_fu_144_p2 );

    SC_METHOD(thread_sum2_fu_144_p2);
    sensitive << ( tmp_3_cast_fu_136_p1 );
    sensitive << ( sext_cast_fu_140_p1 );

    SC_METHOD(thread_tmp1_fu_124_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( chin );

    SC_METHOD(thread_tmp1_fu_124_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ky );

    SC_METHOD(thread_tmp1_fu_124_p2);
    sensitive << ( tmp1_fu_124_p0 );
    sensitive << ( tmp1_fu_124_p1 );

    SC_METHOD(thread_tmp_12_fu_175_p1);
    sensitive << ( c_reg_112_pp0_iter1_reg );

    SC_METHOD(thread_tmp_3_cast_fu_136_p1);
    sensitive << ( weight_offset1 );

    SC_METHOD(thread_tmp_s_fu_164_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( n_reg_180 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( c_cast_fu_160_p1 );

    SC_METHOD(thread_weight_blk_n_AR);
    sensitive << ( m_axi_weight_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_weight_blk_n_R);
    sensitive << ( m_axi_weight_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_s_reg_192 );

    SC_METHOD(thread_weight_buffer_address0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_12_fu_175_p1 );

    SC_METHOD(thread_weight_buffer_ce0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_weight_buffer_d0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( weight_addr_read_reg_201 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_weight_buffer_we0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_s_reg_192_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_s_fu_164_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_sig_ioackin_m_axi_weight_ARREADY );

    ap_CS_fsm = "0000000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_weight_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "load_weight_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_weight_AWVALID, "(port)m_axi_weight_AWVALID");
    sc_trace(mVcdFile, m_axi_weight_AWREADY, "(port)m_axi_weight_AWREADY");
    sc_trace(mVcdFile, m_axi_weight_AWADDR, "(port)m_axi_weight_AWADDR");
    sc_trace(mVcdFile, m_axi_weight_AWID, "(port)m_axi_weight_AWID");
    sc_trace(mVcdFile, m_axi_weight_AWLEN, "(port)m_axi_weight_AWLEN");
    sc_trace(mVcdFile, m_axi_weight_AWSIZE, "(port)m_axi_weight_AWSIZE");
    sc_trace(mVcdFile, m_axi_weight_AWBURST, "(port)m_axi_weight_AWBURST");
    sc_trace(mVcdFile, m_axi_weight_AWLOCK, "(port)m_axi_weight_AWLOCK");
    sc_trace(mVcdFile, m_axi_weight_AWCACHE, "(port)m_axi_weight_AWCACHE");
    sc_trace(mVcdFile, m_axi_weight_AWPROT, "(port)m_axi_weight_AWPROT");
    sc_trace(mVcdFile, m_axi_weight_AWQOS, "(port)m_axi_weight_AWQOS");
    sc_trace(mVcdFile, m_axi_weight_AWREGION, "(port)m_axi_weight_AWREGION");
    sc_trace(mVcdFile, m_axi_weight_AWUSER, "(port)m_axi_weight_AWUSER");
    sc_trace(mVcdFile, m_axi_weight_WVALID, "(port)m_axi_weight_WVALID");
    sc_trace(mVcdFile, m_axi_weight_WREADY, "(port)m_axi_weight_WREADY");
    sc_trace(mVcdFile, m_axi_weight_WDATA, "(port)m_axi_weight_WDATA");
    sc_trace(mVcdFile, m_axi_weight_WSTRB, "(port)m_axi_weight_WSTRB");
    sc_trace(mVcdFile, m_axi_weight_WLAST, "(port)m_axi_weight_WLAST");
    sc_trace(mVcdFile, m_axi_weight_WID, "(port)m_axi_weight_WID");
    sc_trace(mVcdFile, m_axi_weight_WUSER, "(port)m_axi_weight_WUSER");
    sc_trace(mVcdFile, m_axi_weight_ARVALID, "(port)m_axi_weight_ARVALID");
    sc_trace(mVcdFile, m_axi_weight_ARREADY, "(port)m_axi_weight_ARREADY");
    sc_trace(mVcdFile, m_axi_weight_ARADDR, "(port)m_axi_weight_ARADDR");
    sc_trace(mVcdFile, m_axi_weight_ARID, "(port)m_axi_weight_ARID");
    sc_trace(mVcdFile, m_axi_weight_ARLEN, "(port)m_axi_weight_ARLEN");
    sc_trace(mVcdFile, m_axi_weight_ARSIZE, "(port)m_axi_weight_ARSIZE");
    sc_trace(mVcdFile, m_axi_weight_ARBURST, "(port)m_axi_weight_ARBURST");
    sc_trace(mVcdFile, m_axi_weight_ARLOCK, "(port)m_axi_weight_ARLOCK");
    sc_trace(mVcdFile, m_axi_weight_ARCACHE, "(port)m_axi_weight_ARCACHE");
    sc_trace(mVcdFile, m_axi_weight_ARPROT, "(port)m_axi_weight_ARPROT");
    sc_trace(mVcdFile, m_axi_weight_ARQOS, "(port)m_axi_weight_ARQOS");
    sc_trace(mVcdFile, m_axi_weight_ARREGION, "(port)m_axi_weight_ARREGION");
    sc_trace(mVcdFile, m_axi_weight_ARUSER, "(port)m_axi_weight_ARUSER");
    sc_trace(mVcdFile, m_axi_weight_RVALID, "(port)m_axi_weight_RVALID");
    sc_trace(mVcdFile, m_axi_weight_RREADY, "(port)m_axi_weight_RREADY");
    sc_trace(mVcdFile, m_axi_weight_RDATA, "(port)m_axi_weight_RDATA");
    sc_trace(mVcdFile, m_axi_weight_RLAST, "(port)m_axi_weight_RLAST");
    sc_trace(mVcdFile, m_axi_weight_RID, "(port)m_axi_weight_RID");
    sc_trace(mVcdFile, m_axi_weight_RUSER, "(port)m_axi_weight_RUSER");
    sc_trace(mVcdFile, m_axi_weight_RRESP, "(port)m_axi_weight_RRESP");
    sc_trace(mVcdFile, m_axi_weight_BVALID, "(port)m_axi_weight_BVALID");
    sc_trace(mVcdFile, m_axi_weight_BREADY, "(port)m_axi_weight_BREADY");
    sc_trace(mVcdFile, m_axi_weight_BRESP, "(port)m_axi_weight_BRESP");
    sc_trace(mVcdFile, m_axi_weight_BID, "(port)m_axi_weight_BID");
    sc_trace(mVcdFile, m_axi_weight_BUSER, "(port)m_axi_weight_BUSER");
    sc_trace(mVcdFile, weight_offset, "(port)weight_offset");
    sc_trace(mVcdFile, weight_offset1, "(port)weight_offset1");
    sc_trace(mVcdFile, weight_buffer_address0, "(port)weight_buffer_address0");
    sc_trace(mVcdFile, weight_buffer_ce0, "(port)weight_buffer_ce0");
    sc_trace(mVcdFile, weight_buffer_we0, "(port)weight_buffer_we0");
    sc_trace(mVcdFile, weight_buffer_d0, "(port)weight_buffer_d0");
    sc_trace(mVcdFile, chin, "(port)chin");
    sc_trace(mVcdFile, kx, "(port)kx");
    sc_trace(mVcdFile, ky, "(port)ky");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, weight_blk_n_AR, "weight_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, weight_blk_n_R, "weight_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_s_reg_192, "tmp_s_reg_192");
    sc_trace(mVcdFile, c_reg_112, "c_reg_112");
    sc_trace(mVcdFile, c_reg_112_pp0_iter1_reg, "c_reg_112_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter0, "ap_block_state9_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter1, "ap_block_state10_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter2, "ap_block_state11_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, n_fu_130_p2, "n_fu_130_p2");
    sc_trace(mVcdFile, n_reg_180, "n_reg_180");
    sc_trace(mVcdFile, weight_addr_reg_186, "weight_addr_reg_186");
    sc_trace(mVcdFile, tmp_s_fu_164_p2, "tmp_s_fu_164_p2");
    sc_trace(mVcdFile, tmp_s_reg_192_pp0_iter1_reg, "tmp_s_reg_192_pp0_iter1_reg");
    sc_trace(mVcdFile, c_1_fu_169_p2, "c_1_fu_169_p2");
    sc_trace(mVcdFile, c_1_reg_196, "c_1_reg_196");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, weight_addr_read_reg_201, "weight_addr_read_reg_201");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state9, "ap_condition_pp0_exit_iter0_state9");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_phi_mux_c_phi_fu_116_p4, "ap_phi_mux_c_phi_fu_116_p4");
    sc_trace(mVcdFile, tmp_12_fu_175_p1, "tmp_12_fu_175_p1");
    sc_trace(mVcdFile, sum2_cast_fu_150_p1, "sum2_cast_fu_150_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_weight_ARREADY, "ap_reg_ioackin_m_axi_weight_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_weight_ARREADY, "ap_sig_ioackin_m_axi_weight_ARREADY");
    sc_trace(mVcdFile, tmp1_fu_124_p0, "tmp1_fu_124_p0");
    sc_trace(mVcdFile, tmp1_fu_124_p1, "tmp1_fu_124_p1");
    sc_trace(mVcdFile, n_fu_130_p0, "n_fu_130_p0");
    sc_trace(mVcdFile, tmp1_fu_124_p2, "tmp1_fu_124_p2");
    sc_trace(mVcdFile, tmp_3_cast_fu_136_p1, "tmp_3_cast_fu_136_p1");
    sc_trace(mVcdFile, sext_cast_fu_140_p1, "sext_cast_fu_140_p1");
    sc_trace(mVcdFile, sum2_fu_144_p2, "sum2_fu_144_p2");
    sc_trace(mVcdFile, c_cast_fu_160_p1, "c_cast_fu_160_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

load_weight::~load_weight() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void load_weight::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state9.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_weight_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_weight_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_weight_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_weight_ARREADY.read())) {
                ap_reg_ioackin_m_axi_weight_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(tmp_s_reg_192.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        c_reg_112 = c_1_reg_196.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        c_reg_112 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        c_1_reg_196 = c_1_fu_169_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        c_reg_112_pp0_iter1_reg = c_reg_112.read();
        tmp_s_reg_192 = tmp_s_fu_164_p2.read();
        tmp_s_reg_192_pp0_iter1_reg = tmp_s_reg_192.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        n_reg_180 = n_fu_130_p2.read();
        weight_addr_reg_186 =  (sc_lv<32>) (sum2_cast_fu_150_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_s_reg_192.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        weight_addr_read_reg_201 = m_axi_weight_RDATA.read();
    }
}

void load_weight::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[8];
}

void load_weight::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void load_weight::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[9];
}

void load_weight::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void load_weight::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void load_weight::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void load_weight::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(tmp_s_reg_192.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_weight_RVALID.read()));
}

void load_weight::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(tmp_s_reg_192.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_weight_RVALID.read()));
}

void load_weight::thread_ap_block_state10_pp0_stage0_iter1() {
    ap_block_state10_pp0_stage0_iter1 = (esl_seteq<1,1,1>(tmp_s_reg_192.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_weight_RVALID.read()));
}

void load_weight::thread_ap_block_state11_pp0_stage0_iter2() {
    ap_block_state11_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void load_weight::thread_ap_block_state9_pp0_stage0_iter0() {
    ap_block_state9_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void load_weight::thread_ap_condition_pp0_exit_iter0_state9() {
    if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_164_p2.read())) {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_0;
    }
}

void load_weight::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void load_weight::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void load_weight::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void load_weight::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void load_weight::thread_ap_phi_mux_c_phi_fu_116_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(tmp_s_reg_192.read(), ap_const_lv1_1))) {
        ap_phi_mux_c_phi_fu_116_p4 = c_1_reg_196.read();
    } else {
        ap_phi_mux_c_phi_fu_116_p4 = c_reg_112.read();
    }
}

void load_weight::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void load_weight::thread_ap_sig_ioackin_m_axi_weight_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_weight_ARREADY.read())) {
        ap_sig_ioackin_m_axi_weight_ARREADY = m_axi_weight_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_weight_ARREADY = ap_const_logic_1;
    }
}

void load_weight::thread_c_1_fu_169_p2() {
    c_1_fu_169_p2 = (!ap_phi_mux_c_phi_fu_116_p4.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(ap_phi_mux_c_phi_fu_116_p4.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void load_weight::thread_c_cast_fu_160_p1() {
    c_cast_fu_160_p1 = esl_zext<32,31>(ap_phi_mux_c_phi_fu_116_p4.read());
}

void load_weight::thread_m_axi_weight_ARADDR() {
    m_axi_weight_ARADDR = weight_addr_reg_186.read();
}

void load_weight::thread_m_axi_weight_ARBURST() {
    m_axi_weight_ARBURST = ap_const_lv2_0;
}

void load_weight::thread_m_axi_weight_ARCACHE() {
    m_axi_weight_ARCACHE = ap_const_lv4_0;
}

void load_weight::thread_m_axi_weight_ARID() {
    m_axi_weight_ARID = ap_const_lv1_0;
}

void load_weight::thread_m_axi_weight_ARLEN() {
    m_axi_weight_ARLEN = n_reg_180.read();
}

void load_weight::thread_m_axi_weight_ARLOCK() {
    m_axi_weight_ARLOCK = ap_const_lv2_0;
}

void load_weight::thread_m_axi_weight_ARPROT() {
    m_axi_weight_ARPROT = ap_const_lv3_0;
}

void load_weight::thread_m_axi_weight_ARQOS() {
    m_axi_weight_ARQOS = ap_const_lv4_0;
}

void load_weight::thread_m_axi_weight_ARREGION() {
    m_axi_weight_ARREGION = ap_const_lv4_0;
}

void load_weight::thread_m_axi_weight_ARSIZE() {
    m_axi_weight_ARSIZE = ap_const_lv3_0;
}

void load_weight::thread_m_axi_weight_ARUSER() {
    m_axi_weight_ARUSER = ap_const_lv1_0;
}

void load_weight::thread_m_axi_weight_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_weight_ARREADY.read()))) {
        m_axi_weight_ARVALID = ap_const_logic_1;
    } else {
        m_axi_weight_ARVALID = ap_const_logic_0;
    }
}

void load_weight::thread_m_axi_weight_AWADDR() {
    m_axi_weight_AWADDR = ap_const_lv32_0;
}

void load_weight::thread_m_axi_weight_AWBURST() {
    m_axi_weight_AWBURST = ap_const_lv2_0;
}

void load_weight::thread_m_axi_weight_AWCACHE() {
    m_axi_weight_AWCACHE = ap_const_lv4_0;
}

void load_weight::thread_m_axi_weight_AWID() {
    m_axi_weight_AWID = ap_const_lv1_0;
}

void load_weight::thread_m_axi_weight_AWLEN() {
    m_axi_weight_AWLEN = ap_const_lv32_0;
}

void load_weight::thread_m_axi_weight_AWLOCK() {
    m_axi_weight_AWLOCK = ap_const_lv2_0;
}

void load_weight::thread_m_axi_weight_AWPROT() {
    m_axi_weight_AWPROT = ap_const_lv3_0;
}

void load_weight::thread_m_axi_weight_AWQOS() {
    m_axi_weight_AWQOS = ap_const_lv4_0;
}

void load_weight::thread_m_axi_weight_AWREGION() {
    m_axi_weight_AWREGION = ap_const_lv4_0;
}

void load_weight::thread_m_axi_weight_AWSIZE() {
    m_axi_weight_AWSIZE = ap_const_lv3_0;
}

void load_weight::thread_m_axi_weight_AWUSER() {
    m_axi_weight_AWUSER = ap_const_lv1_0;
}

void load_weight::thread_m_axi_weight_AWVALID() {
    m_axi_weight_AWVALID = ap_const_logic_0;
}

void load_weight::thread_m_axi_weight_BREADY() {
    m_axi_weight_BREADY = ap_const_logic_0;
}

void load_weight::thread_m_axi_weight_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(tmp_s_reg_192.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_weight_RREADY = ap_const_logic_1;
    } else {
        m_axi_weight_RREADY = ap_const_logic_0;
    }
}

void load_weight::thread_m_axi_weight_WDATA() {
    m_axi_weight_WDATA = ap_const_lv32_0;
}

void load_weight::thread_m_axi_weight_WID() {
    m_axi_weight_WID = ap_const_lv1_0;
}

void load_weight::thread_m_axi_weight_WLAST() {
    m_axi_weight_WLAST = ap_const_logic_0;
}

void load_weight::thread_m_axi_weight_WSTRB() {
    m_axi_weight_WSTRB = ap_const_lv4_0;
}

void load_weight::thread_m_axi_weight_WUSER() {
    m_axi_weight_WUSER = ap_const_lv1_0;
}

void load_weight::thread_m_axi_weight_WVALID() {
    m_axi_weight_WVALID = ap_const_logic_0;
}

void load_weight::thread_n_fu_130_p0() {
    n_fu_130_p0 = kx.read();
}

void load_weight::thread_n_fu_130_p2() {
    n_fu_130_p2 = (!n_fu_130_p0.read().is_01() || !tmp1_fu_124_p2.read().is_01())? sc_lv<32>(): sc_bigint<32>(n_fu_130_p0.read()) * sc_bigint<32>(tmp1_fu_124_p2.read());
}

void load_weight::thread_sext_cast_fu_140_p1() {
    sext_cast_fu_140_p1 = esl_zext<33,30>(weight_offset.read());
}

void load_weight::thread_sum2_cast_fu_150_p1() {
    sum2_cast_fu_150_p1 = esl_sext<64,33>(sum2_fu_144_p2.read());
}

void load_weight::thread_sum2_fu_144_p2() {
    sum2_fu_144_p2 = (!tmp_3_cast_fu_136_p1.read().is_01() || !sext_cast_fu_140_p1.read().is_01())? sc_lv<33>(): (sc_bigint<33>(tmp_3_cast_fu_136_p1.read()) + sc_biguint<33>(sext_cast_fu_140_p1.read()));
}

void load_weight::thread_tmp1_fu_124_p0() {
    tmp1_fu_124_p0 = chin.read();
}

void load_weight::thread_tmp1_fu_124_p1() {
    tmp1_fu_124_p1 = ky.read();
}

void load_weight::thread_tmp1_fu_124_p2() {
    tmp1_fu_124_p2 = (!tmp1_fu_124_p0.read().is_01() || !tmp1_fu_124_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp1_fu_124_p0.read()) * sc_bigint<32>(tmp1_fu_124_p1.read());
}

void load_weight::thread_tmp_12_fu_175_p1() {
    tmp_12_fu_175_p1 = esl_zext<64,31>(c_reg_112_pp0_iter1_reg.read());
}

void load_weight::thread_tmp_3_cast_fu_136_p1() {
    tmp_3_cast_fu_136_p1 = esl_sext<33,32>(weight_offset1.read());
}

void load_weight::thread_tmp_s_fu_164_p2() {
    tmp_s_fu_164_p2 = (!c_cast_fu_160_p1.read().is_01() || !n_reg_180.read().is_01())? sc_lv<1>(): (sc_bigint<32>(c_cast_fu_160_p1.read()) < sc_bigint<32>(n_reg_180.read()));
}

void load_weight::thread_weight_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        weight_blk_n_AR = m_axi_weight_ARREADY.read();
    } else {
        weight_blk_n_AR = ap_const_logic_1;
    }
}

void load_weight::thread_weight_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(tmp_s_reg_192.read(), ap_const_lv1_1))) {
        weight_blk_n_R = m_axi_weight_RVALID.read();
    } else {
        weight_blk_n_R = ap_const_logic_1;
    }
}

void load_weight::thread_weight_buffer_address0() {
    weight_buffer_address0 =  (sc_lv<15>) (tmp_12_fu_175_p1.read());
}

void load_weight::thread_weight_buffer_ce0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        weight_buffer_ce0 = ap_const_logic_1;
    } else {
        weight_buffer_ce0 = ap_const_logic_0;
    }
}

void load_weight::thread_weight_buffer_d0() {
    weight_buffer_d0 = weight_addr_read_reg_201.read();
}

void load_weight::thread_weight_buffer_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_reg_192_pp0_iter1_reg.read()))) {
        weight_buffer_we0 = ap_const_logic_1;
    } else {
        weight_buffer_we0 = ap_const_logic_0;
    }
}

void load_weight::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_weight_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_164_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_164_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXX";
            break;
    }
}

}

