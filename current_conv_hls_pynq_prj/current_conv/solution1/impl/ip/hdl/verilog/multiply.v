// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module multiply (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        feature_buffer_address0,
        feature_buffer_ce0,
        feature_buffer_q0,
        weight_buffer_address0,
        weight_buffer_ce0,
        weight_buffer_q0,
        chin,
        kx,
        ky,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] feature_buffer_address0;
output   feature_buffer_ce0;
input  [31:0] feature_buffer_q0;
output  [14:0] weight_buffer_address0;
output   weight_buffer_ce0;
input  [31:0] weight_buffer_q0;
input  [31:0] chin;
input  [31:0] kx;
input  [31:0] ky;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg feature_buffer_ce0;
reg weight_buffer_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [95:0] indvar_flatten1_reg_88;
reg   [31:0] index_reg_99;
reg   [30:0] c_reg_110;
reg   [63:0] indvar_flatten_reg_121;
reg   [31:0] index_1_reg_132;
reg   [30:0] i_reg_143;
reg   [31:0] sum_2_reg_154;
reg   [31:0] index_2_reg_166;
reg   [30:0] j_reg_177;
wire   [0:0] tmp_fu_200_p2;
reg   [0:0] tmp_reg_553;
wire   [31:0] smax_cast_fu_218_p1;
reg   [31:0] smax_cast_reg_558;
wire   [31:0] tmp_2_fu_244_p2;
reg   [31:0] tmp_2_reg_563;
wire   [63:0] bound_fu_258_p2;
reg   [63:0] bound_reg_568;
wire   [95:0] bound4_fu_272_p2;
reg   [95:0] bound4_reg_573;
wire   [0:0] exitcond_flatten1_fu_306_p2;
reg   [0:0] exitcond_flatten1_reg_578;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [95:0] indvar_flatten_next1_fu_311_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] index_mid2_fu_397_p3;
wire   [30:0] c_mid2_fu_405_p3;
wire   [31:0] index_1_mid2_fu_467_p3;
wire   [30:0] i_mid2_fu_475_p3;
wire   [31:0] tmp_10_fu_499_p2;
wire   [30:0] j_1_fu_519_p3;
wire   [63:0] indvar_flatten_next_fu_533_p3;
wire   [31:0] sum_fu_188_p2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage0;
wire  signed [63:0] tmp_4_fu_483_p1;
wire  signed [63:0] tmp_7_fu_494_p1;
wire   [31:0] tmp_9_fu_193_p2;
wire  signed [31:0] tmp_fu_200_p0;
wire  signed [31:0] tmp_11_fu_206_p0;
wire   [30:0] tmp_11_fu_206_p1;
wire   [30:0] smax_fu_210_p3;
wire  signed [31:0] tmp_1_fu_222_p0;
wire  signed [31:0] tmp_12_fu_228_p0;
wire   [0:0] tmp_1_fu_222_p2;
wire   [30:0] tmp_12_fu_228_p1;
wire   [30:0] smax1_fu_232_p3;
wire   [30:0] tmp_2_fu_244_p0;
wire   [30:0] tmp_2_fu_244_p1;
wire  signed [31:0] cast_fu_250_p0;
wire  signed [31:0] cast1_fu_254_p0;
wire   [31:0] bound_fu_258_p0;
wire   [31:0] bound_fu_258_p1;
wire   [63:0] bound4_fu_272_p0;
wire   [31:0] bound4_fu_272_p1;
wire  signed [31:0] tmp_5_fu_282_p0;
wire   [30:0] tmp_5_fu_282_p1;
wire   [31:0] tmp_5_fu_282_p2;
wire   [31:0] i_cast_mid1_fu_287_p1;
wire   [31:0] j_cast_fu_297_p1;
wire  signed [31:0] tmp_s_fu_301_p1;
wire   [30:0] c_s_fu_317_p2;
wire   [0:0] exitcond_flatten_fu_332_p2;
wire   [31:0] index_s_fu_327_p2;
wire   [30:0] tmp_5_mid1_fu_361_p0;
wire  signed [31:0] tmp_5_mid1_fu_361_p1;
wire   [31:0] tmp_5_mid1_fu_361_p2;
wire   [31:0] tmp_8_fu_291_p2;
wire   [0:0] tmp_s_fu_301_p2;
wire   [30:0] i_mid_fu_345_p3;
wire   [31:0] index_1_mid_fu_337_p3;
wire   [30:0] i_1_fu_413_p2;
wire   [0:0] tmp_mid_fu_390_p3;
wire   [31:0] index_2_mid_fu_353_p3;
wire   [31:0] tmp_7_dup_fu_419_p2;
wire   [31:0] i_cast_fu_424_p1;
wire   [31:0] tmp_5_mid2_fu_366_p3;
wire   [31:0] tmp_9_mid223_v_fu_374_p3;
wire   [31:0] tmp_8_mid1_fu_436_p2;
wire  signed [31:0] tmp_9_mid2_v_fu_442_p3;
wire  signed [31:0] tmp_9_mid2_fu_450_p1;
wire   [30:0] j_cast_mid_fu_382_p3;
wire   [30:0] j_cast_mid2_fu_455_p3;
wire  signed [31:0] index_2_mid2_fu_428_p3;
wire   [31:0] j_cast_mid2_cast_fu_463_p1;
wire   [31:0] tmp_9_mid2_fu_450_p2;
wire   [31:0] tmp_6_fu_488_p2;
wire   [30:0] j_op_fu_505_p2;
wire   [30:0] j_mid213_op_fu_511_p3;
wire   [63:0] indvar_flatten_op_fu_527_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [95:0] bound4_fu_272_p00;
wire   [95:0] bound4_fu_272_p10;
wire   [63:0] bound_fu_258_p00;
wire   [63:0] bound_fu_258_p10;
wire   [31:0] tmp_2_fu_244_p00;
wire   [31:0] tmp_2_fu_244_p10;
wire   [31:0] tmp_5_fu_282_p10;
wire   [31:0] tmp_5_mid1_fu_361_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32bkb_U20(
    .din0(sum_2_reg_154),
    .din1(tmp_9_fu_193_p2),
    .dout(sum_fu_188_p2)
);

conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32cud_U21(
    .din0(feature_buffer_q0),
    .din1(weight_buffer_q0),
    .dout(tmp_9_fu_193_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_306_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_reg_110 <= c_mid2_fu_405_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_reg_110 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_306_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_143 <= i_mid2_fu_475_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_143 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_306_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        index_1_reg_132 <= index_1_mid2_fu_467_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        index_1_reg_132 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_306_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        index_2_reg_166 <= tmp_10_fu_499_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        index_2_reg_166 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_306_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        index_reg_99 <= index_mid2_fu_397_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        index_reg_99 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_306_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten1_reg_88 <= indvar_flatten_next1_fu_311_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten1_reg_88 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_306_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_121 <= indvar_flatten_next_fu_533_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_121 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_306_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_177 <= j_1_fu_519_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_177 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_578 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        sum_2_reg_154 <= sum_fu_188_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_2_reg_154 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bound4_reg_573 <= bound4_fu_272_p2;
        bound_reg_568 <= bound_fu_258_p2;
        smax_cast_reg_558[30 : 0] <= smax_cast_fu_218_p1[30 : 0];
        tmp_2_reg_563 <= tmp_2_fu_244_p2;
        tmp_reg_553 <= tmp_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten1_reg_578 <= exitcond_flatten1_fu_306_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten1_fu_306_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        feature_buffer_ce0 = 1'b1;
    end else begin
        feature_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_buffer_ce0 = 1'b1;
    end else begin
        weight_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((exitcond_flatten1_fu_306_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((exitcond_flatten1_fu_306_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = sum_2_reg_154;

assign bound4_fu_272_p0 = bound4_fu_272_p00;

assign bound4_fu_272_p00 = bound_fu_258_p2;

assign bound4_fu_272_p1 = bound4_fu_272_p10;

assign bound4_fu_272_p10 = chin;

assign bound4_fu_272_p2 = (bound4_fu_272_p0 * bound4_fu_272_p1);

assign bound_fu_258_p0 = bound_fu_258_p00;

assign bound_fu_258_p00 = $unsigned(cast1_fu_254_p0);

assign bound_fu_258_p1 = bound_fu_258_p10;

assign bound_fu_258_p10 = $unsigned(cast_fu_250_p0);

assign bound_fu_258_p2 = (bound_fu_258_p0 * bound_fu_258_p1);

assign c_mid2_fu_405_p3 = ((exitcond_flatten_fu_332_p2[0:0] === 1'b1) ? c_s_fu_317_p2 : c_reg_110);

assign c_s_fu_317_p2 = (c_reg_110 + 31'd1);

assign cast1_fu_254_p0 = kx;

assign cast_fu_250_p0 = ky;

assign exitcond_flatten1_fu_306_p2 = ((indvar_flatten1_reg_88 == bound4_reg_573) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_332_p2 = ((indvar_flatten_reg_121 == bound_reg_568) ? 1'b1 : 1'b0);

assign feature_buffer_address0 = tmp_4_fu_483_p1;

assign i_1_fu_413_p2 = (i_mid_fu_345_p3 + 31'd1);

assign i_cast_fu_424_p1 = i_1_fu_413_p2;

assign i_cast_mid1_fu_287_p1 = i_reg_143;

assign i_mid2_fu_475_p3 = ((tmp_mid_fu_390_p3[0:0] === 1'b1) ? i_mid_fu_345_p3 : i_1_fu_413_p2);

assign i_mid_fu_345_p3 = ((exitcond_flatten_fu_332_p2[0:0] === 1'b1) ? 31'd0 : i_reg_143);

assign index_1_mid2_fu_467_p3 = ((tmp_mid_fu_390_p3[0:0] === 1'b1) ? index_1_mid_fu_337_p3 : tmp_7_dup_fu_419_p2);

assign index_1_mid_fu_337_p3 = ((exitcond_flatten_fu_332_p2[0:0] === 1'b1) ? index_s_fu_327_p2 : index_1_reg_132);

assign index_2_mid2_fu_428_p3 = ((tmp_mid_fu_390_p3[0:0] === 1'b1) ? index_2_mid_fu_353_p3 : tmp_7_dup_fu_419_p2);

assign index_2_mid_fu_353_p3 = ((exitcond_flatten_fu_332_p2[0:0] === 1'b1) ? index_s_fu_327_p2 : index_2_reg_166);

assign index_mid2_fu_397_p3 = ((exitcond_flatten_fu_332_p2[0:0] === 1'b1) ? index_s_fu_327_p2 : index_reg_99);

assign index_s_fu_327_p2 = (tmp_2_reg_563 + index_reg_99);

assign indvar_flatten_next1_fu_311_p2 = (indvar_flatten1_reg_88 + 96'd1);

assign indvar_flatten_next_fu_533_p3 = ((exitcond_flatten_fu_332_p2[0:0] === 1'b1) ? 64'd1 : indvar_flatten_op_fu_527_p2);

assign indvar_flatten_op_fu_527_p2 = (indvar_flatten_reg_121 + 64'd1);

assign j_1_fu_519_p3 = ((tmp_mid_fu_390_p3[0:0] === 1'b1) ? j_mid213_op_fu_511_p3 : 31'd1);

assign j_cast_fu_297_p1 = j_reg_177;

assign j_cast_mid2_cast_fu_463_p1 = j_cast_mid2_fu_455_p3;

assign j_cast_mid2_fu_455_p3 = ((tmp_mid_fu_390_p3[0:0] === 1'b1) ? j_cast_mid_fu_382_p3 : 31'd0);

assign j_cast_mid_fu_382_p3 = ((exitcond_flatten_fu_332_p2[0:0] === 1'b1) ? 31'd0 : j_reg_177);

assign j_mid213_op_fu_511_p3 = ((exitcond_flatten_fu_332_p2[0:0] === 1'b1) ? 31'd1 : j_op_fu_505_p2);

assign j_op_fu_505_p2 = (j_reg_177 + 31'd1);

assign smax1_fu_232_p3 = ((tmp_1_fu_222_p2[0:0] === 1'b1) ? tmp_12_fu_228_p1 : 31'd0);

assign smax_cast_fu_218_p1 = smax_fu_210_p3;

assign smax_fu_210_p3 = ((tmp_fu_200_p2[0:0] === 1'b1) ? tmp_11_fu_206_p1 : 31'd0);

assign tmp_10_fu_499_p2 = ($signed(index_2_mid2_fu_428_p3) + $signed(32'd1));

assign tmp_11_fu_206_p0 = kx;

assign tmp_11_fu_206_p1 = tmp_11_fu_206_p0[30:0];

assign tmp_12_fu_228_p0 = ky;

assign tmp_12_fu_228_p1 = tmp_12_fu_228_p0[30:0];

assign tmp_1_fu_222_p0 = ky;

assign tmp_1_fu_222_p2 = (($signed(tmp_1_fu_222_p0) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_2_fu_244_p0 = tmp_2_fu_244_p00;

assign tmp_2_fu_244_p00 = smax1_fu_232_p3;

assign tmp_2_fu_244_p1 = tmp_2_fu_244_p10;

assign tmp_2_fu_244_p10 = smax_fu_210_p3;

assign tmp_2_fu_244_p2 = (tmp_2_fu_244_p0 * tmp_2_fu_244_p1);

assign tmp_4_fu_483_p1 = index_2_mid2_fu_428_p3;

assign tmp_5_fu_282_p0 = ky;

assign tmp_5_fu_282_p1 = tmp_5_fu_282_p10;

assign tmp_5_fu_282_p10 = c_reg_110;

assign tmp_5_fu_282_p2 = ($signed(tmp_5_fu_282_p0) * $signed({{1'b0}, {tmp_5_fu_282_p1}}));

assign tmp_5_mid1_fu_361_p0 = tmp_5_mid1_fu_361_p00;

assign tmp_5_mid1_fu_361_p00 = c_s_fu_317_p2;

assign tmp_5_mid1_fu_361_p1 = ky;

assign tmp_5_mid1_fu_361_p2 = ($signed({{1'b0}, {tmp_5_mid1_fu_361_p0}}) * $signed(tmp_5_mid1_fu_361_p1));

assign tmp_5_mid2_fu_366_p3 = ((exitcond_flatten_fu_332_p2[0:0] === 1'b1) ? tmp_5_mid1_fu_361_p2 : tmp_5_fu_282_p2);

assign tmp_6_fu_488_p2 = (j_cast_mid2_cast_fu_463_p1 + tmp_9_mid2_fu_450_p2);

assign tmp_7_dup_fu_419_p2 = (smax_cast_reg_558 + index_1_mid_fu_337_p3);

assign tmp_7_fu_494_p1 = $signed(tmp_6_fu_488_p2);

assign tmp_8_fu_291_p2 = (tmp_5_fu_282_p2 + i_cast_mid1_fu_287_p1);

assign tmp_8_mid1_fu_436_p2 = (i_cast_fu_424_p1 + tmp_5_mid2_fu_366_p3);

assign tmp_9_mid223_v_fu_374_p3 = ((exitcond_flatten_fu_332_p2[0:0] === 1'b1) ? tmp_5_mid1_fu_361_p2 : tmp_8_fu_291_p2);

assign tmp_9_mid2_fu_450_p1 = kx;

assign tmp_9_mid2_fu_450_p2 = ($signed(tmp_9_mid2_v_fu_442_p3) * $signed(tmp_9_mid2_fu_450_p1));

assign tmp_9_mid2_v_fu_442_p3 = ((tmp_mid_fu_390_p3[0:0] === 1'b1) ? tmp_9_mid223_v_fu_374_p3 : tmp_8_mid1_fu_436_p2);

assign tmp_fu_200_p0 = kx;

assign tmp_fu_200_p2 = (($signed(tmp_fu_200_p0) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_mid_fu_390_p3 = ((exitcond_flatten_fu_332_p2[0:0] === 1'b1) ? tmp_reg_553 : tmp_s_fu_301_p2);

assign tmp_s_fu_301_p1 = kx;

assign tmp_s_fu_301_p2 = (($signed(j_cast_fu_297_p1) < $signed(tmp_s_fu_301_p1)) ? 1'b1 : 1'b0);

assign weight_buffer_address0 = tmp_7_fu_494_p1;

always @ (posedge ap_clk) begin
    smax_cast_reg_558[31] <= 1'b0;
end

endmodule //multiply
