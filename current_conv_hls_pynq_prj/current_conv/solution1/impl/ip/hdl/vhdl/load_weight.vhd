-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_weight is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_weight_AWVALID : OUT STD_LOGIC;
    m_axi_weight_AWREADY : IN STD_LOGIC;
    m_axi_weight_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_WVALID : OUT STD_LOGIC;
    m_axi_weight_WREADY : IN STD_LOGIC;
    m_axi_weight_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_WLAST : OUT STD_LOGIC;
    m_axi_weight_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_ARVALID : OUT STD_LOGIC;
    m_axi_weight_ARREADY : IN STD_LOGIC;
    m_axi_weight_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_RVALID : IN STD_LOGIC;
    m_axi_weight_RREADY : OUT STD_LOGIC;
    m_axi_weight_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_RLAST : IN STD_LOGIC;
    m_axi_weight_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_BVALID : IN STD_LOGIC;
    m_axi_weight_BREADY : OUT STD_LOGIC;
    m_axi_weight_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    weight_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    weight_offset1 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_buffer_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    weight_buffer_ce0 : OUT STD_LOGIC;
    weight_buffer_we0 : OUT STD_LOGIC;
    weight_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    chin : IN STD_LOGIC_VECTOR (31 downto 0);
    kx : IN STD_LOGIC_VECTOR (31 downto 0);
    ky : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of load_weight is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weight_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal weight_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_s_reg_192 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_reg_112 : STD_LOGIC_VECTOR (30 downto 0);
    signal c_reg_112_pp0_iter1_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal n_fu_130_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_addr_reg_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_192_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal c_1_fu_169_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal c_1_reg_196 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal weight_addr_read_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_c_phi_fu_116_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_12_fu_175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_weight_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_weight_ARREADY : STD_LOGIC;
    signal tmp1_fu_124_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_fu_130_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_cast_fu_136_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_cast_fu_140_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum2_fu_144_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal c_cast_fu_160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_weight_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_weight_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_sig_ioackin_m_axi_weight_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_weight_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_weight_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_weight_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    c_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_s_reg_192 = ap_const_lv1_1))) then 
                c_reg_112 <= c_1_reg_196;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                c_reg_112 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                c_1_reg_196 <= c_1_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                c_reg_112_pp0_iter1_reg <= c_reg_112;
                tmp_s_reg_192 <= tmp_s_fu_164_p2;
                tmp_s_reg_192_pp0_iter1_reg <= tmp_s_reg_192;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                n_reg_180 <= n_fu_130_p2;
                weight_addr_reg_186 <= sum2_cast_fu_150_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_s_reg_192 = ap_const_lv1_1))) then
                weight_addr_read_reg_201 <= m_axi_weight_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, tmp_s_fu_164_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_sig_ioackin_m_axi_weight_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sig_ioackin_m_axi_weight_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((tmp_s_fu_164_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((tmp_s_fu_164_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_weight_RVALID, ap_enable_reg_pp0_iter1, tmp_s_reg_192)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_weight_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_s_reg_192 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_weight_RVALID, ap_enable_reg_pp0_iter1, tmp_s_reg_192)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_weight_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_s_reg_192 = ap_const_lv1_1));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(m_axi_weight_RVALID, tmp_s_reg_192)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((m_axi_weight_RVALID = ap_const_logic_0) and (tmp_s_reg_192 = ap_const_lv1_1));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(tmp_s_fu_164_p2)
    begin
        if ((tmp_s_fu_164_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_phi_fu_116_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_s_reg_192, c_reg_112, c_1_reg_196)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_s_reg_192 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_phi_fu_116_p4 <= c_1_reg_196;
        else 
            ap_phi_mux_c_phi_fu_116_p4 <= c_reg_112;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_weight_ARREADY_assign_proc : process(m_axi_weight_ARREADY, ap_reg_ioackin_m_axi_weight_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_weight_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_weight_ARREADY <= m_axi_weight_ARREADY;
        else 
            ap_sig_ioackin_m_axi_weight_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    c_1_fu_169_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_phi_fu_116_p4) + unsigned(ap_const_lv31_1));
    c_cast_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_c_phi_fu_116_p4),32));
    m_axi_weight_ARADDR <= weight_addr_reg_186;
    m_axi_weight_ARBURST <= ap_const_lv2_0;
    m_axi_weight_ARCACHE <= ap_const_lv4_0;
    m_axi_weight_ARID <= ap_const_lv1_0;
    m_axi_weight_ARLEN <= n_reg_180;
    m_axi_weight_ARLOCK <= ap_const_lv2_0;
    m_axi_weight_ARPROT <= ap_const_lv3_0;
    m_axi_weight_ARQOS <= ap_const_lv4_0;
    m_axi_weight_ARREGION <= ap_const_lv4_0;
    m_axi_weight_ARSIZE <= ap_const_lv3_0;
    m_axi_weight_ARUSER <= ap_const_lv1_0;

    m_axi_weight_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_m_axi_weight_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_weight_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_weight_ARVALID <= ap_const_logic_1;
        else 
            m_axi_weight_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weight_AWADDR <= ap_const_lv32_0;
    m_axi_weight_AWBURST <= ap_const_lv2_0;
    m_axi_weight_AWCACHE <= ap_const_lv4_0;
    m_axi_weight_AWID <= ap_const_lv1_0;
    m_axi_weight_AWLEN <= ap_const_lv32_0;
    m_axi_weight_AWLOCK <= ap_const_lv2_0;
    m_axi_weight_AWPROT <= ap_const_lv3_0;
    m_axi_weight_AWQOS <= ap_const_lv4_0;
    m_axi_weight_AWREGION <= ap_const_lv4_0;
    m_axi_weight_AWSIZE <= ap_const_lv3_0;
    m_axi_weight_AWUSER <= ap_const_lv1_0;
    m_axi_weight_AWVALID <= ap_const_logic_0;
    m_axi_weight_BREADY <= ap_const_logic_0;

    m_axi_weight_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_s_reg_192, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_s_reg_192 = ap_const_lv1_1))) then 
            m_axi_weight_RREADY <= ap_const_logic_1;
        else 
            m_axi_weight_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weight_WDATA <= ap_const_lv32_0;
    m_axi_weight_WID <= ap_const_lv1_0;
    m_axi_weight_WLAST <= ap_const_logic_0;
    m_axi_weight_WSTRB <= ap_const_lv4_0;
    m_axi_weight_WUSER <= ap_const_lv1_0;
    m_axi_weight_WVALID <= ap_const_logic_0;
    n_fu_130_p0 <= kx;
    n_fu_130_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(n_fu_130_p0) * signed(tmp1_fu_124_p2))), 32));
    sext_cast_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weight_offset),33));
        sum2_cast_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum2_fu_144_p2),64));

    sum2_fu_144_p2 <= std_logic_vector(signed(tmp_3_cast_fu_136_p1) + signed(sext_cast_fu_140_p1));
    tmp1_fu_124_p0 <= chin;
    tmp1_fu_124_p1 <= ky;
    tmp1_fu_124_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp1_fu_124_p0) * signed(tmp1_fu_124_p1))), 32));
    tmp_12_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_112_pp0_iter1_reg),64));
        tmp_3_cast_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_offset1),33));

    tmp_s_fu_164_p2 <= "1" when (signed(c_cast_fu_160_p1) < signed(n_reg_180)) else "0";

    weight_blk_n_AR_assign_proc : process(m_axi_weight_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            weight_blk_n_AR <= m_axi_weight_ARREADY;
        else 
            weight_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    weight_blk_n_R_assign_proc : process(m_axi_weight_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_s_reg_192)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_s_reg_192 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            weight_blk_n_R <= m_axi_weight_RVALID;
        else 
            weight_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    weight_buffer_address0 <= tmp_12_fu_175_p1(15 - 1 downto 0);

    weight_buffer_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_buffer_ce0 <= ap_const_logic_1;
        else 
            weight_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_d0 <= weight_addr_read_reg_201;

    weight_buffer_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_s_reg_192_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_s_reg_192_pp0_iter1_reg = ap_const_lv1_1))) then 
            weight_buffer_we0 <= ap_const_logic_1;
        else 
            weight_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
